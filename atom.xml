<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>水聿津</title>
  
  <subtitle>坚持做有价值的输出</subtitle>
  <link href="https://oxford561.github.io/atom.xml" rel="self"/>
  
  <link href="https://oxford561.github.io/"/>
  <updated>2021-11-20T14:02:08.761Z</updated>
  <id>https://oxford561.github.io/</id>
  
  <author>
    <name>水聿津</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++核心编程</title>
    <link href="https://oxford561.github.io/2021/11/20/c-he-xin-bian-cheng/"/>
    <id>https://oxford561.github.io/2021/11/20/c-he-xin-bian-cheng/</id>
    <published>2021-11-20T08:17:07.000Z</published>
    <updated>2021-11-20T14:02:08.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><pre><code>在程序编译后，生成了exe可执行程序，**未执行该程序前**分为两个区域**代码区：**    存放 CPU 执行的机器指令    代码区是**共享**的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可    代码区是**只读**的，使其只读的原因是防止程序意外地修改了它的指令**全局区：**    全局变量和静态变量存放在此.    全局区还包含了常量区, 字符串常量和其他常量也存放在此.    ==该区域的数据在程序结束后由操作系统释放==.</code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;全局变量int g_a &#x3D; 10;int g_b &#x3D; 10;&#x2F;&#x2F;全局常量const int c_g_a &#x3D; 10;const int c_g_b &#x3D; 10;int main() &#123;&#x2F;&#x2F;局部变量int a &#x3D; 10;int b &#x3D; 10;&#x2F;&#x2F;打印地址cout &lt;&lt; &quot;局部变量a地址为： &quot; &lt;&lt; (int)&amp;a &lt;&lt; endl;cout &lt;&lt; &quot;局部变量b地址为： &quot; &lt;&lt; (int)&amp;b &lt;&lt; endl;cout &lt;&lt; &quot;全局变量g_a地址为： &quot; &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;cout &lt;&lt; &quot;全局变量g_b地址为： &quot; &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;&#x2F;&#x2F;静态变量static int s_a &#x3D; 10;static int s_b &#x3D; 10;cout &lt;&lt; &quot;静态变量s_a地址为： &quot; &lt;&lt; (int)&amp;s_a &lt;&lt; endl;cout &lt;&lt; &quot;静态变量s_b地址为： &quot; &lt;&lt; (int)&amp;s_b &lt;&lt; endl;cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world&quot; &lt;&lt; endl;cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world1&quot; &lt;&lt; endl;cout &lt;&lt; &quot;全局常量c_g_a地址为： &quot; &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;cout &lt;&lt; &quot;全局常量c_g_b地址为： &quot; &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;const int c_l_a &#x3D; 10;const int c_l_b &#x3D; 10;cout &lt;&lt; &quot;局部常量c_l_a地址为： &quot; &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;cout &lt;&lt; &quot;局部常量c_l_b地址为： &quot; &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><p><img src="/2021/11/20/c-he-xin-bian-cheng/1545017602518.png" alt="1545017602518"></p><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const修饰的全局常量  和 字符串常量</li></ul><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><pre><code>**栈区：**    由编译器自动分配释放, 存放函数的参数值,局部变量等    注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int * func()&#123;int a &#x3D; 10;return &amp;a;&#125;int main() &#123;int *p &#x3D; func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>**堆区：**    由程序员分配释放,若程序员不释放,程序结束时由操作系统回收    在C++中主要利用new在堆区开辟内存</code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* func()&#123;int* a &#x3D; new int(10);return a;&#125;int main() &#123;int *p &#x3D; func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;    system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><pre><code>C++中利用==new==操作符在堆区开辟数据堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==语法：` new 数据类型`利用new创建的数据，会返回该数据对应的类型的指针</code></pre><p><strong>示例1： 基本语法</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* func()&#123;int* a &#x3D; new int(10);return a;&#125;int main() &#123;int *p &#x3D; func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;&#x2F;&#x2F;利用delete释放堆区数据delete p;&#x2F;&#x2F;cout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;报错，释放的空间不可访问system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：开辟数组</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;堆区开辟数组int main() &#123;int* arr &#x3D; new int[10];for (int i &#x3D; 0; i &lt; 10; i++)&#123;arr[i] &#x3D; i + 100;&#125;for (int i &#x3D; 0; i &lt; 10; i++)&#123;cout &lt;&lt; arr[i] &lt;&lt; endl;&#125;&#x2F;&#x2F;释放数组 delete 后加 []delete[] arr;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int a &#x3D; 10;int &amp;b &#x3D; a;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;b &#x3D; 100;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int a &#x3D; 10;int b &#x3D; 20;&#x2F;&#x2F;int &amp;c; &#x2F;&#x2F;错误，引用必须初始化int &amp;c &#x3D; a; &#x2F;&#x2F;一旦初始化后，就不可以更改c &#x3D; b; &#x2F;&#x2F;这是赋值操作，不是更改引用cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1. 值传递void mySwap01(int a, int b) &#123;int temp &#x3D; a;a &#x3D; b;b &#x3D; temp;&#125;&#x2F;&#x2F;2. 地址传递void mySwap02(int* a, int* b) &#123;int temp &#x3D; *a;*a &#x3D; *b;*b &#x3D; temp;&#125;&#x2F;&#x2F;3. 引用传递void mySwap03(int&amp; a, int&amp; b) &#123;int temp &#x3D; a;a &#x3D; b;b &#x3D; temp;&#125;int main() &#123;int a &#x3D; 10;int b &#x3D; 20;mySwap01(a, b);cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;mySwap02(&amp;a, &amp;b);cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;mySwap03(a, b);cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;返回局部变量引用int&amp; test01() &#123;int a &#x3D; 10; &#x2F;&#x2F;局部变量return a;&#125;&#x2F;&#x2F;返回静态变量引用int&amp; test02() &#123;static int a &#x3D; 20;return a;&#125;int main() &#123;&#x2F;&#x2F;不能返回局部变量的引用int&amp; ref &#x3D; test01();cout &lt;&lt; &quot;ref &#x3D; &quot; &lt;&lt; ref &lt;&lt; endl;cout &lt;&lt; &quot;ref &#x3D; &quot; &lt;&lt; ref &lt;&lt; endl;&#x2F;&#x2F;如果函数做左值，那么必须返回引用int&amp; ref2 &#x3D; test02();cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;test02() &#x3D; 1000;cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;发现是引用，转换为 int* const ref &#x3D; &amp;a;void func(int&amp; ref)&#123;ref &#x3D; 100; &#x2F;&#x2F; ref是引用，转换为*ref &#x3D; 100&#125;int main()&#123;int a &#x3D; 10;        &#x2F;&#x2F;自动转换为 int* const ref &#x3D; &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改int&amp; ref &#x3D; a; ref &#x3D; 20; &#x2F;&#x2F;内部发现ref是引用，自动帮我们转换为: *ref &#x3D; 20;    cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;    func(a);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;引用使用的场景，通常用来修饰形参void showValue(const int&amp; v) &#123;&#x2F;&#x2F;v +&#x3D; 10;cout &lt;&lt; v &lt;&lt; endl;&#125;int main() &#123;&#x2F;&#x2F;int&amp; ref &#x3D; 10;  引用本身需要一个合法的内存空间，因此这行错误&#x2F;&#x2F;加入const就可以了，编译器优化代码，int temp &#x3D; 10; const int&amp; ref &#x3D; temp;const int&amp; ref &#x3D; 10;&#x2F;&#x2F;ref &#x3D; 100;  &#x2F;&#x2F;加入const后不可以修改变量cout &lt;&lt; ref &lt;&lt; endl;&#x2F;&#x2F;函数中利用常量引用防止误操作修改实参int a &#x3D; 10;showValue(a);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int func(int a, int b &#x3D; 10, int c &#x3D; 10) &#123;return a + b + c;&#125;&#x2F;&#x2F;1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值&#x2F;&#x2F;2. 如果函数声明有默认值，函数实现的时候就不能有默认参数int func2(int a &#x3D; 10, int b &#x3D; 10);int func2(int a, int b) &#123;return a + b;&#125;int main() &#123;cout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; func(20, 20) &lt;&lt; endl;cout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; func(100) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数占位参数 ，占位参数也可以有默认参数void func(int a, int) &#123;cout &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;&#125;int main() &#123;func(10,10); &#x2F;&#x2F;占位参数必须填补system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数重载需要函数都在同一个作用域下void func()&#123;cout &lt;&lt; &quot;func 的调用！&quot; &lt;&lt; endl;&#125;void func(int a)&#123;cout &lt;&lt; &quot;func (int a) 的调用！&quot; &lt;&lt; endl;&#125;void func(double a)&#123;cout &lt;&lt; &quot;func (double a)的调用！&quot; &lt;&lt; endl;&#125;void func(int a ,double b)&#123;cout &lt;&lt; &quot;func (int a ,double b) 的调用！&quot; &lt;&lt; endl;&#125;void func(double a ,int b)&#123;cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;函数返回值不可以作为函数重载条件&#x2F;&#x2F;int func(double a, int b)&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;&#x2F;&#x2F;&#125;int main() &#123;func();func(10);func(3.14);func(10,3.14);func(3.14 , 10);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数重载注意事项&#x2F;&#x2F;1、引用作为重载条件void func(int &amp;a)&#123;cout &lt;&lt; &quot;func (int &amp;a) 调用 &quot; &lt;&lt; endl;&#125;void func(const int &amp;a)&#123;cout &lt;&lt; &quot;func (const int &amp;a) 调用 &quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;2、函数重载碰到函数默认参数void func2(int a, int b &#x3D; 10)&#123;cout &lt;&lt; &quot;func2(int a, int b &#x3D; 10) 调用&quot; &lt;&lt; endl;&#125;void func2(int a)&#123;cout &lt;&lt; &quot;func2(int a) 调用&quot; &lt;&lt; endl;&#125;int main() &#123;int a &#x3D; 10;func(a); &#x2F;&#x2F;调用无constfunc(10);&#x2F;&#x2F;调用有const&#x2F;&#x2F;func2(10); &#x2F;&#x2F;碰到默认参数产生歧义，需要避免system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4 类和对象"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：==封装、继承、多态==</p><p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p><p><strong>例如：</strong></p><pre><code>人可以作为对象，属性有姓名、年龄、身高、体重...，行为有走、跑、跳、吃饭、唱歌...车也可以作为对象，属性有轮胎、方向盘、车灯...,行为有载人、放音乐、放空调...具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</code></pre><h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><pre><code>在设计类的时候，属性和行为写在一起，表现事物</code></pre><p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p><p><strong>示例1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;圆周率const double PI &#x3D; 3.14;&#x2F;&#x2F;1、封装的意义&#x2F;&#x2F;将属性和行为作为一个整体，用来表现生活中的事物&#x2F;&#x2F;封装一个圆类，求圆的周长&#x2F;&#x2F;class代表设计一个类，后面跟着的是类名class Circle&#123;public:  &#x2F;&#x2F;访问权限  公共的权限&#x2F;&#x2F;属性int m_r;&#x2F;&#x2F;半径&#x2F;&#x2F;行为&#x2F;&#x2F;获取到圆的周长double calculateZC()&#123;&#x2F;&#x2F;2 * pi  * r&#x2F;&#x2F;获取圆的周长return  2 * PI * m_r;&#125;&#125;;int main() &#123;&#x2F;&#x2F;通过圆类，创建圆的对象&#x2F;&#x2F; c1就是一个具体的圆Circle c1;c1.m_r &#x3D; 10; &#x2F;&#x2F;给圆对象的半径 进行赋值操作&#x2F;&#x2F;2 * pi * 10 &#x3D; &#x3D; 62.8cout &lt;&lt; &quot;圆的周长为： &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生类class Student &#123;public:void setName(string name) &#123;m_name &#x3D; name;&#125;void setID(int id) &#123;m_id &#x3D; id;&#125;void showStudent() &#123;cout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl;&#125;public:string m_name;int m_id;&#125;;int main() &#123;Student stu;stu.setName(&quot;德玛西亚&quot;);stu.setID(250);stu.showStudent();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public        公共权限  </li><li>protected 保护权限</li><li>private      私有权限</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;三种权限&#x2F;&#x2F;公共权限  public     类内可以访问  类外可以访问&#x2F;&#x2F;保护权限  protected  类内可以访问  类外不可以访问&#x2F;&#x2F;私有权限  private    类内可以访问  类外不可以访问class Person&#123;&#x2F;&#x2F;姓名  公共权限public:string m_Name;&#x2F;&#x2F;汽车  保护权限protected:string m_Car;&#x2F;&#x2F;银行卡密码  私有权限private:int m_Password;public:void func()&#123;m_Name &#x3D; &quot;张三&quot;;m_Car &#x3D; &quot;拖拉机&quot;;m_Password &#x3D; 123456;&#125;&#125;;int main() &#123;Person p;p.m_Name &#x3D; &quot;李四&quot;;&#x2F;&#x2F;p.m_Car &#x3D; &quot;奔驰&quot;;  &#x2F;&#x2F;保护权限类外访问不到&#x2F;&#x2F;p.m_Password &#x3D; 123; &#x2F;&#x2F;私有权限类外访问不到system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class   默认权限为私有</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class C1&#123;int  m_A; &#x2F;&#x2F;默认是私有权限&#125;;struct C2&#123;int m_A;  &#x2F;&#x2F;默认是公共权限&#125;;int main() &#123;C1 c1;c1.m_A &#x3D; 10; &#x2F;&#x2F;错误，访问权限是私有C2 c2;c2.m_A &#x3D; 10; &#x2F;&#x2F;正确，访问权限是公共system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p><p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:&#x2F;&#x2F;姓名设置可读可写void setName(string name) &#123;m_Name &#x3D; name;&#125;string getName()&#123;return m_Name;&#125;&#x2F;&#x2F;获取年龄 int getAge() &#123;return m_Age;&#125;&#x2F;&#x2F;设置年龄void setAge(int age) &#123;if (age &lt; 0 || age &gt; 150) &#123;cout &lt;&lt; &quot;你个老妖精!&quot; &lt;&lt; endl;return;&#125;m_Age &#x3D; age;&#125;&#x2F;&#x2F;情人设置为只写void setLover(string lover) &#123;m_Lover &#x3D; lover;&#125;private:string m_Name; &#x2F;&#x2F;可读可写  姓名int m_Age; &#x2F;&#x2F;只读  年龄string m_Lover; &#x2F;&#x2F;只写  情人&#125;;int main() &#123;Person p;&#x2F;&#x2F;姓名设置p.setName(&quot;张三&quot;);cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.getName() &lt;&lt; endl;&#x2F;&#x2F;年龄设置p.setAge(50);cout &lt;&lt; &quot;年龄： &quot; &lt;&lt; p.getAge() &lt;&lt; endl;&#x2F;&#x2F;情人设置p.setLover(&quot;苍井&quot;);&#x2F;&#x2F;cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  &#x2F;&#x2F;只写属性，不可以读取system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="/2021/11/20/c-he-xin-bian-cheng/1545533548532.png" alt="1545533548532"></p><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="/2021/11/20/c-he-xin-bian-cheng/1545533829184.png" alt="1545533829184"></p><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul><li> 生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li> C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><pre><code>一个对象或者变量没有初始状态，对其使用后果是未知同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</code></pre><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p><ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p><ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号  ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:&#x2F;&#x2F;构造函数Person()&#123;cout &lt;&lt; &quot;Person的构造函数调用&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;析构函数~Person()&#123;cout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;Person p;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><pre><code>按参数分为： 有参构造和无参构造按类型分为： 普通构造和拷贝构造</code></pre><p>三种调用方式：</p><pre><code>括号法显示法隐式转换法</code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1、构造函数分类&#x2F;&#x2F; 按照参数分类分为 有参和无参构造   无参又称为默认构造函数&#x2F;&#x2F; 按照类型分类分为 普通构造和拷贝构造class Person &#123;public:&#x2F;&#x2F;无参（默认）构造函数Person() &#123;cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;有参构造函数Person(int a) &#123;age &#x3D; a;cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;拷贝构造函数Person(const Person&amp; p) &#123;age &#x3D; p.age;cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;析构函数~Person() &#123;cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;&#125;public:int age;&#125;;&#x2F;&#x2F;2、构造函数的调用&#x2F;&#x2F;调用无参构造函数void test01() &#123;Person p; &#x2F;&#x2F;调用无参构造函数&#125;&#x2F;&#x2F;调用有参的构造函数void test02() &#123;&#x2F;&#x2F;2.1  括号法，常用Person p1(10);&#x2F;&#x2F;注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明&#x2F;&#x2F;Person p2();&#x2F;&#x2F;2.2 显式法Person p2 &#x3D; Person(10); Person p3 &#x3D; Person(p2);&#x2F;&#x2F;Person(10)单独写就是匿名对象  当前行结束之后，马上析构&#x2F;&#x2F;2.3 隐式转换法Person p4 &#x3D; 10; &#x2F;&#x2F; Person p4 &#x3D; Person(10); Person p5 &#x3D; p4; &#x2F;&#x2F; Person p5 &#x3D; Person(p4); &#x2F;&#x2F;注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明&#x2F;&#x2F;Person p5(p4);&#125;int main() &#123;test01();&#x2F;&#x2F;test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:Person() &#123;cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;mAge &#x3D; 0;&#125;Person(int age) &#123;cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;mAge &#x3D; age;&#125;Person(const Person&amp; p) &#123;cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;mAge &#x3D; p.mAge;&#125;&#x2F;&#x2F;析构函数在释放内存之前调用~Person() &#123;cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;&#125;public:int mAge;&#125;;&#x2F;&#x2F;1. 使用一个已经创建完毕的对象来初始化一个新对象void test01() &#123;Person man(100); &#x2F;&#x2F;p对象已经创建完毕Person newman(man); &#x2F;&#x2F;调用拷贝构造函数Person newman2 &#x3D; man; &#x2F;&#x2F;拷贝构造&#x2F;&#x2F;Person newman3;&#x2F;&#x2F;newman3 &#x3D; man; &#x2F;&#x2F;不是调用拷贝构造函数，赋值操作&#125;&#x2F;&#x2F;2. 值传递的方式给函数参数传值&#x2F;&#x2F;相当于Person p1 &#x3D; p;void doWork(Person p1) &#123;&#125;void test02() &#123;Person p; &#x2F;&#x2F;无参构造函数doWork(p);&#125;&#x2F;&#x2F;3. 以值方式返回局部对象Person doWork2()&#123;Person p1;cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;return p1;&#125;void test03()&#123;Person p &#x3D; doWork2();cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;&#125;int main() &#123;&#x2F;&#x2F;test01();&#x2F;&#x2F;test02();test03();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li></ul><ul><li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:&#x2F;&#x2F;无参（默认）构造函数Person() &#123;cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;有参构造函数Person(int a) &#123;age &#x3D; a;cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;拷贝构造函数Person(const Person&amp; p) &#123;age &#x3D; p.age;cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;析构函数~Person() &#123;cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;&#125;public:int age;&#125;;void test01()&#123;Person p1(18);&#x2F;&#x2F;如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作Person p2(p1);cout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;void test02()&#123;&#x2F;&#x2F;如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造Person p1; &#x2F;&#x2F;此时如果用户自己没有提供默认构造，会出错Person p2(10); &#x2F;&#x2F;用户提供的有参Person p3(p2); &#x2F;&#x2F;此时如果用户没有提供拷贝构造，编译器会提供&#x2F;&#x2F;如果用户提供拷贝构造，编译器不会提供其他构造函数Person p4; &#x2F;&#x2F;此时如果用户自己没有提供默认构造，会出错Person p5(10); &#x2F;&#x2F;此时如果用户自己没有提供有参，会出错Person p6(p5); &#x2F;&#x2F;用户自己提供拷贝构造&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:&#x2F;&#x2F;无参（默认）构造函数Person() &#123;cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;有参构造函数Person(int age ,int height) &#123;cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;m_age &#x3D; age;m_height &#x3D; new int(height);&#125;&#x2F;&#x2F;拷贝构造函数  Person(const Person&amp; p) &#123;cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;&#x2F;&#x2F;如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题m_age &#x3D; p.m_age;m_height &#x3D; new int(*p.m_height);&#125;&#x2F;&#x2F;析构函数~Person() &#123;cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;if (m_height !&#x3D; NULL)&#123;delete m_height;&#125;&#125;public:int m_age;int* m_height;&#125;;void test01()&#123;Person p1(18, 180);Person p2(p1);cout &lt;&lt; &quot;p1的年龄： &quot; &lt;&lt; p1.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p1.m_height &lt;&lt; endl;cout &lt;&lt; &quot;p2的年龄： &quot; &lt;&lt; p2.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p2.m_height &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:&#x2F;&#x2F;&#x2F;&#x2F;传统方式初始化&#x2F;&#x2F;Person(int a, int b, int c) &#123;&#x2F;&#x2F;m_A &#x3D; a;&#x2F;&#x2F;m_B &#x3D; b;&#x2F;&#x2F;m_C &#x3D; c;&#x2F;&#x2F;&#125;&#x2F;&#x2F;初始化列表方式初始化Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) &#123;&#125;void PrintPerson() &#123;cout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl;cout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl;cout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl;&#125;private:int m_A;int m_B;int m_C;&#125;;int main() &#123;Person p(1, 2, 3);p.PrintPerson();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class A &#123;&#125;class B&#123;    A a；&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Phone&#123;public:Phone(string name)&#123;m_PhoneName &#x3D; name;cout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl;&#125;~Phone()&#123;cout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl;&#125;string m_PhoneName;&#125;;class Person&#123;public:&#x2F;&#x2F;初始化列表可以告诉编译器调用哪一个构造函数Person(string name, string pName) :m_Name(name), m_Phone(pName)&#123;cout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;&#125;~Person()&#123;cout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;&#125;void playGame()&#123;cout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl;&#125;string m_Name;Phone m_Phone;&#125;;void test01()&#123;&#x2F;&#x2F;当类中成员是其他类对象时，我们称该成员为 对象成员&#x2F;&#x2F;构造的顺序是 ：先调用对象成员的构造，再调用本类构造&#x2F;&#x2F;析构顺序与构造相反Person p(&quot;张三&quot; , &quot;苹果X&quot;);p.playGame();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li> 所有对象共享同一份数据</li><li> 在编译阶段分配内存</li><li> 类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li> 所有对象共享同一个函数</li><li> 静态成员函数只能访问静态成员变量</li></ul></li></ul><p><strong>示例1 ：</strong>静态成员变量</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:static int m_A; &#x2F;&#x2F;静态成员变量&#x2F;&#x2F;静态成员变量特点：&#x2F;&#x2F;1 在编译阶段分配内存&#x2F;&#x2F;2 类内声明，类外初始化&#x2F;&#x2F;3 所有对象共享同一份数据private:static int m_B; &#x2F;&#x2F;静态成员变量也是有访问权限的&#125;;int Person::m_A &#x3D; 10;int Person::m_B &#x3D; 10;void test01()&#123;&#x2F;&#x2F;静态成员变量两种访问方式&#x2F;&#x2F;1、通过对象Person p1;p1.m_A &#x3D; 100;cout &lt;&lt; &quot;p1.m_A &#x3D; &quot; &lt;&lt; p1.m_A &lt;&lt; endl;Person p2;p2.m_A &#x3D; 200;cout &lt;&lt; &quot;p1.m_A &#x3D; &quot; &lt;&lt; p1.m_A &lt;&lt; endl; &#x2F;&#x2F;共享同一份数据cout &lt;&lt; &quot;p2.m_A &#x3D; &quot; &lt;&lt; p2.m_A &lt;&lt; endl;&#x2F;&#x2F;2、通过类名cout &lt;&lt; &quot;m_A &#x3D; &quot; &lt;&lt; Person::m_A &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; &quot;m_B &#x3D; &quot; &lt;&lt; Person::m_B &lt;&lt; endl; &#x2F;&#x2F;私有权限访问不到&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>静态成员函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:&#x2F;&#x2F;静态成员函数特点：&#x2F;&#x2F;1 程序共享一个函数&#x2F;&#x2F;2 静态成员函数只能访问静态成员变量static void func()&#123;cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;m_A &#x3D; 100;&#x2F;&#x2F;m_B &#x3D; 100; &#x2F;&#x2F;错误，不可以访问非静态成员变量&#125;static int m_A; &#x2F;&#x2F;静态成员变量int m_B; &#x2F;&#x2F; private:&#x2F;&#x2F;静态成员函数也是有访问权限的static void func2()&#123;cout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl;&#125;&#125;;int Person::m_A &#x3D; 10;void test01()&#123;&#x2F;&#x2F;静态成员变量两种访问方式&#x2F;&#x2F;1、通过对象Person p1;p1.func();&#x2F;&#x2F;2、通过类名Person::func();&#x2F;&#x2F;Person::func2(); &#x2F;&#x2F;私有权限访问不到&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:Person() &#123;mA &#x3D; 0;&#125;&#x2F;&#x2F;非静态成员变量占对象空间int mA;&#x2F;&#x2F;静态成员变量不占对象空间static int mB; &#x2F;&#x2F;函数也不占对象空间，所有函数共享一个函数实例void func() &#123;cout &lt;&lt; &quot;mA:&quot; &lt;&lt; this-&gt;mA &lt;&lt; endl;&#125;&#x2F;&#x2F;静态成员函数也不占对象空间static void sfunc() &#123;&#125;&#125;;int main() &#123;cout &lt;&lt; sizeof(Person) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ul><li> 当形参和成员变量同名时，可用this指针来区分</li><li> 在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:Person(int age)&#123;&#x2F;&#x2F;1、当形参和成员变量同名时，可用this指针来区分this-&gt;age &#x3D; age;&#125;Person&amp; PersonAddPerson(Person p)&#123;this-&gt;age +&#x3D; p.age;&#x2F;&#x2F;返回对象本身return *this;&#125;int age;&#125;;void test01()&#123;Person p1(10);cout &lt;&lt; &quot;p1.age &#x3D; &quot; &lt;&lt; p1.age &lt;&lt; endl;Person p2(10);p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);cout &lt;&lt; &quot;p2.age &#x3D; &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;空指针访问成员函数class Person &#123;public:void ShowClassName() &#123;cout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl;&#125;void ShowPerson() &#123;if (this &#x3D;&#x3D; NULL) &#123;return;&#125;cout &lt;&lt; mAge &lt;&lt; endl;&#125;public:int mAge;&#125;;void test01()&#123;Person * p &#x3D; NULL;p-&gt;ShowClassName(); &#x2F;&#x2F;空指针，可以调用成员函数p-&gt;ShowPerson();  &#x2F;&#x2F;但是如果成员函数中用到了this指针，就不可以了&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:Person() &#123;m_A &#x3D; 0;m_B &#x3D; 0;&#125;&#x2F;&#x2F;this指针的本质是一个指针常量，指针的指向不可修改&#x2F;&#x2F;如果想让指针指向的值也不可以修改，需要声明常函数void ShowPerson() const &#123;&#x2F;&#x2F;const Type* const pointer;&#x2F;&#x2F;this &#x3D; NULL; &#x2F;&#x2F;不能修改指针的指向 Person* const this;&#x2F;&#x2F;this-&gt;mA &#x3D; 100; &#x2F;&#x2F;但是this指针指向的对象的数据是可以修改的&#x2F;&#x2F;const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量this-&gt;m_B &#x3D; 100;&#125;void MyFunc() const &#123;&#x2F;&#x2F;mA &#x3D; 10000;&#125;public:int m_A;mutable int m_B; &#x2F;&#x2F;可修改 可变的&#125;;&#x2F;&#x2F;const修饰对象  常对象void test01() &#123;const Person person; &#x2F;&#x2F;常量对象  cout &lt;&lt; person.m_A &lt;&lt; endl;&#x2F;&#x2F;person.mA &#x3D; 100; &#x2F;&#x2F;常对象不能修改成员变量的值,但是可以访问person.m_B &#x3D; 100; &#x2F;&#x2F;但是常对象可以修改mutable修饰成员变量&#x2F;&#x2F;常对象访问成员函数person.MyFunc(); &#x2F;&#x2F;常对象不能调用const的函数&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为  ==friend==</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building&#123;&#x2F;&#x2F;告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容friend void goodGay(Building * building);public:Building()&#123;this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;public:string m_SittingRoom; &#x2F;&#x2F;客厅private:string m_BedRoom; &#x2F;&#x2F;卧室&#125;;void goodGay(Building * building)&#123;cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;Building b;goodGay(&amp;b);&#125;int main()&#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay&#123;public:goodGay();void visit();private:Building *building;&#125;;class Building&#123;&#x2F;&#x2F;告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容friend class goodGay;public:Building();public:string m_SittingRoom; &#x2F;&#x2F;客厅private:string m_BedRoom;&#x2F;&#x2F;卧室&#125;;Building::Building()&#123;this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;goodGay::goodGay()&#123;building &#x3D; new Building;&#125;void goodGay::visit()&#123;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;goodGay gg;gg.visit();&#125;int main()&#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay&#123;public:goodGay();void visit(); &#x2F;&#x2F;只让visit函数作为Building的好朋友，可以发访问Building中私有内容void visit2(); private:Building *building;&#125;;class Building&#123;&#x2F;&#x2F;告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容friend void goodGay::visit();public:Building();public:string m_SittingRoom; &#x2F;&#x2F;客厅private:string m_BedRoom;&#x2F;&#x2F;卧室&#125;;Building::Building()&#123;this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;goodGay::goodGay()&#123;building &#x3D; new Building;&#125;void goodGay::visit()&#123;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void goodGay::visit2()&#123;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;goodGay  gg;gg.visit();&#125;int main()&#123;    test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:Person() &#123;&#125;;Person(int a, int b)&#123;this-&gt;m_A &#x3D; a;this-&gt;m_B &#x3D; b;&#125;&#x2F;&#x2F;成员函数实现 + 号运算符重载Person operator+(const Person&amp; p) &#123;Person temp;temp.m_A &#x3D; this-&gt;m_A + p.m_A;temp.m_B &#x3D; this-&gt;m_B + p.m_B;return temp;&#125;public:int m_A;int m_B;&#125;;&#x2F;&#x2F;全局函数实现 + 号运算符重载&#x2F;&#x2F;Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;&#x2F;&#x2F;Person temp(0, 0);&#x2F;&#x2F;temp.m_A &#x3D; p1.m_A + p2.m_A;&#x2F;&#x2F;temp.m_B &#x3D; p1.m_B + p2.m_B;&#x2F;&#x2F;return temp;&#x2F;&#x2F;&#125;&#x2F;&#x2F;运算符重载 可以发生函数重载 Person operator+(const Person&amp; p2, int val)  &#123;Person temp;temp.m_A &#x3D; p2.m_A + val;temp.m_B &#x3D; p2.m_B + val;return temp;&#125;void test() &#123;Person p1(10, 10);Person p2(20, 20);&#x2F;&#x2F;成员函数方式Person p3 &#x3D; p2 + p1;  &#x2F;&#x2F;相当于 p2.operaor+(p1)cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl;Person p4 &#x3D; p3 + 10; &#x2F;&#x2F;相当于 operator+(p3,10)cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;&#125;int main() &#123;test();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p></blockquote><blockquote><p>总结2：不要滥用运算符重载</p></blockquote><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);public:Person(int a, int b)&#123;this-&gt;m_A &#x3D; a;this-&gt;m_B &#x3D; b;&#125;&#x2F;&#x2F;成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果&#x2F;&#x2F;void operator&lt;&lt;(Person&amp; p)&#123;&#x2F;&#x2F;&#125;private:int m_A;int m_B;&#125;;&#x2F;&#x2F;全局函数实现左移重载&#x2F;&#x2F;ostream对象只能有一个ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;out &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B;return out;&#125;void test() &#123;Person p1(10, 20);cout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; &#x2F;&#x2F;链式编程&#125;int main() &#123;test();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyInteger &#123;friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);public:MyInteger() &#123;m_Num &#x3D; 0;&#125;&#x2F;&#x2F;前置++MyInteger&amp; operator++() &#123;&#x2F;&#x2F;先++m_Num++;&#x2F;&#x2F;再返回return *this;&#125;&#x2F;&#x2F;后置++MyInteger operator++(int) &#123;&#x2F;&#x2F;先返回MyInteger temp &#x3D; *this; &#x2F;&#x2F;记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；m_Num++;return temp;&#125;private:int m_Num;&#125;;ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;out &lt;&lt; myint.m_Num;return out;&#125;&#x2F;&#x2F;前置++ 先++ 再返回void test01() &#123;MyInteger myInt;cout &lt;&lt; ++myInt &lt;&lt; endl;cout &lt;&lt; myInt &lt;&lt; endl;&#125;&#x2F;&#x2F;后置++ 先返回 再++void test02() &#123;MyInteger myInt;cout &lt;&lt; myInt++ &lt;&lt; endl;cout &lt;&lt; myInt &lt;&lt; endl;&#125;int main() &#123;test01();&#x2F;&#x2F;test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator=, 对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:Person(int age)&#123;&#x2F;&#x2F;将年龄数据开辟到堆区m_Age &#x3D; new int(age);&#125;&#x2F;&#x2F;重载赋值运算符 Person&amp; operator&#x3D;(Person &amp;p)&#123;if (m_Age !&#x3D; NULL)&#123;delete m_Age;m_Age &#x3D; NULL;&#125;&#x2F;&#x2F;编译器提供的代码是浅拷贝&#x2F;&#x2F;m_Age &#x3D; p.m_Age;&#x2F;&#x2F;提供深拷贝 解决浅拷贝的问题m_Age &#x3D; new int(*p.m_Age);&#x2F;&#x2F;返回自身return *this;&#125;~Person()&#123;if (m_Age !&#x3D; NULL)&#123;delete m_Age;m_Age &#x3D; NULL;&#125;&#125;&#x2F;&#x2F;年龄的指针int *m_Age;&#125;;void test01()&#123;Person p1(18);Person p2(20);Person p3(30);p3 &#x3D; p2 &#x3D; p1; &#x2F;&#x2F;赋值操作cout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl;cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl;cout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;&#125;int main() &#123;test01();&#x2F;&#x2F;int a &#x3D; 10;&#x2F;&#x2F;int b &#x3D; 20;&#x2F;&#x2F;int c &#x3D; 30;&#x2F;&#x2F;c &#x3D; b &#x3D; a;&#x2F;&#x2F;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:Person(string name, int age)&#123;this-&gt;m_Name &#x3D; name;this-&gt;m_Age &#x3D; age;&#125;;bool operator&#x3D;&#x3D;(Person &amp; p)&#123;if (this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)&#123;return true;&#125;else&#123;return false;&#125;&#125;bool operator!&#x3D;(Person &amp; p)&#123;if (this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)&#123;return false;&#125;else&#123;return true;&#125;&#125;string m_Name;int m_Age;&#125;;void test01()&#123;&#x2F;&#x2F;int a &#x3D; 0;&#x2F;&#x2F;int b &#x3D; 0;Person a(&quot;孙悟空&quot;, 18);Person b(&quot;孙悟空&quot;, 18);if (a &#x3D;&#x3D; b)&#123;cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;&#125;if (a !&#x3D; b)&#123;cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;&#125;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyPrint&#123;public:void operator()(string text)&#123;cout &lt;&lt; text &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;重载的（）操作符 也称为仿函数MyPrint myFunc;myFunc(&quot;hello world&quot;);&#125;class MyAdd&#123;public:int operator()(int v1, int v2)&#123;return v1 + v2;&#125;&#125;;void test02()&#123;MyAdd add;int ret &#x3D; add(10, 10);cout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; ret &lt;&lt; endl;&#x2F;&#x2F;匿名对象调用  cout &lt;&lt; &quot;MyAdd()(100,100) &#x3D; &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;&#125;int main() &#123;test01();test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="/2021/11/20/c-he-xin-bian-cheng/1544861202252.png" alt="1544861202252"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;Java页面class Java &#123;public:void header()&#123;cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;&#125;void footer()&#123;cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;&#125;void left()&#123;cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;&#125;void content()&#123;cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;Python页面class Python&#123;public:void header()&#123;cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;&#125;void footer()&#123;cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;&#125;void left()&#123;cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;&#125;void content()&#123;cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;C++页面class CPP &#123;public:void header()&#123;cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;&#125;void footer()&#123;cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;&#125;void left()&#123;cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;&#125;void content()&#123;cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;Java页面cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;Java ja;ja.header();ja.footer();ja.left();ja.content();cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;&#x2F;&#x2F;Python页面cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;Python py;py.header();py.footer();py.left();py.content();cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;&#x2F;&#x2F;C++页面cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;CPP cp;cp.header();cp.footer();cp.left();cp.content();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>继承实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;公共页面class BasePage&#123;public:void header()&#123;cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;&#125;void footer()&#123;cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;&#125;void left()&#123;cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;Java页面class Java : public BasePage&#123;public:void content()&#123;cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;Python页面class Python : public BasePage&#123;public:void content()&#123;cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;C++页面class CPP : public BasePage&#123;public:void content()&#123;cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;Java页面cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;Java ja;ja.header();ja.footer();ja.left();ja.content();cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;&#x2F;&#x2F;Python页面cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;Python py;py.header();py.footer();py.left();py.content();cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;&#x2F;&#x2F;C++页面cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;CPP cp;cp.header();cp.footer();cp.left();cp.content();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>继承的好处：==可以减少重复的代码==</p><p>class A : public B; </p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="/2021/11/20/c-he-xin-bian-cheng/clip_image002.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1&#123;public: int m_A;protected:int m_B;private:int m_C;&#125;;&#x2F;&#x2F;公共继承class Son1 :public Base1&#123;public:void func()&#123;m_A; &#x2F;&#x2F;可访问 public权限m_B; &#x2F;&#x2F;可访问 protected权限&#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问&#125;&#125;;void myClass()&#123;Son1 s1;s1.m_A; &#x2F;&#x2F;其他类只能访问到公共权限&#125;&#x2F;&#x2F;保护继承class Base2&#123;public:int m_A;protected:int m_B;private:int m_C;&#125;;class Son2:protected Base2&#123;public:void func()&#123;m_A; &#x2F;&#x2F;可访问 protected权限m_B; &#x2F;&#x2F;可访问 protected权限&#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问&#125;&#125;;void myClass2()&#123;Son2 s;&#x2F;&#x2F;s.m_A; &#x2F;&#x2F;不可访问&#125;&#x2F;&#x2F;私有继承class Base3&#123;public:int m_A;protected:int m_B;private:int m_C;&#125;;class Son3:private Base3&#123;public:void func()&#123;m_A; &#x2F;&#x2F;可访问 private权限m_B; &#x2F;&#x2F;可访问 private权限&#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问&#125;&#125;;class GrandSon3 :public Son3&#123;public:void func()&#123;&#x2F;&#x2F;Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到&#x2F;&#x2F;m_A;&#x2F;&#x2F;m_B;&#x2F;&#x2F;m_C;&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base&#123;public:int m_A;protected:int m_B;private:int m_C; &#x2F;&#x2F;私有成员只是被隐藏了，但是还是会继承下去&#125;;&#x2F;&#x2F;公共继承class Son :public Base&#123;public:int m_D;&#125;;void test01()&#123;cout &lt;&lt; &quot;sizeof Son &#x3D; &quot; &lt;&lt; sizeof(Son) &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用工具查看：</p><p><img src="/2021/11/20/c-he-xin-bian-cheng/1545881904150.png" alt="1545881904150"></p><p>打开工具窗口后，定位到当前CPP文件的盘符</p><p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p><p>效果如下图：</p><p><img src="/2021/11/20/c-he-xin-bian-cheng/1545882158050.png" alt="1545882158050"></p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base &#123;public:Base()&#123;cout &lt;&lt; &quot;Base构造函数!&quot; &lt;&lt; endl;&#125;~Base()&#123;cout &lt;&lt; &quot;Base析构函数!&quot; &lt;&lt; endl;&#125;&#125;;class Son : public Base&#123;public:Son()&#123;cout &lt;&lt; &quot;Son构造函数!&quot; &lt;&lt; endl;&#125;~Son()&#123;cout &lt;&lt; &quot;Son析构函数!&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反Son s;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote><h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base &#123;public:Base()&#123;m_A &#x3D; 100;&#125;void func()&#123;cout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl;&#125;void func(int a)&#123;cout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl;&#125;public:int m_A;&#125;;class Son : public Base &#123;public:Son()&#123;m_A &#x3D; 200;&#125;&#x2F;&#x2F;当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数&#x2F;&#x2F;如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域void func()&#123;cout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl;&#125;public:int m_A;&#125;;void test01()&#123;Son s;cout &lt;&lt; &quot;Son下的m_A &#x3D; &quot; &lt;&lt; s.m_A &lt;&lt; endl;cout &lt;&lt; &quot;Base下的m_A &#x3D; &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;s.func();s.Base::func();s.Base::func(10);&#125;int main() &#123;test01();system(&quot;pause&quot;);return EXIT_SUCCESS;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base &#123;public:static void func()&#123;cout &lt;&lt; &quot;Base - static void func()&quot; &lt;&lt; endl;&#125;static void func(int a)&#123;cout &lt;&lt; &quot;Base - static void func(int a)&quot; &lt;&lt; endl;&#125;static int m_A;&#125;;int Base::m_A &#x3D; 100;class Son : public Base &#123;public:static void func()&#123;cout &lt;&lt; &quot;Son - static void func()&quot; &lt;&lt; endl;&#125;static int m_A;&#125;;int Son::m_A &#x3D; 200;&#x2F;&#x2F;同名成员属性void test01()&#123;&#x2F;&#x2F;通过对象访问cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;Son s;cout &lt;&lt; &quot;Son  下 m_A &#x3D; &quot; &lt;&lt; s.m_A &lt;&lt; endl;cout &lt;&lt; &quot;Base 下 m_A &#x3D; &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;&#x2F;&#x2F;通过类名访问cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;cout &lt;&lt; &quot;Son  下 m_A &#x3D; &quot; &lt;&lt; Son::m_A &lt;&lt; endl;cout &lt;&lt; &quot;Base 下 m_A &#x3D; &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;&#125;&#x2F;&#x2F;同名成员函数void test02()&#123;&#x2F;&#x2F;通过对象访问cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;Son s;s.func();s.Base::func();cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;Son::func();Son::Base::func();&#x2F;&#x2F;出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问Son::Base::func(100);&#125;int main() &#123;&#x2F;&#x2F;test01();test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1 &#123;public:Base1()&#123;m_A &#x3D; 100;&#125;public:int m_A;&#125;;class Base2 &#123;public:Base2()&#123;m_A &#x3D; 200;  &#x2F;&#x2F;开始是m_B 不会出问题，但是改为mA就会出现不明确&#125;public:int m_A;&#125;;&#x2F;&#x2F;语法：class 子类：继承方式 父类1 ，继承方式 父类2 class Son : public Base2, public Base1 &#123;public:Son()&#123;m_C &#x3D; 300;m_D &#x3D; 400;&#125;public:int m_C;int m_D;&#125;;&#x2F;&#x2F;多继承容易产生成员同名的情况&#x2F;&#x2F;通过使用类名作用域可以区分调用哪一个基类的成员void test01()&#123;Son s;cout &lt;&lt; &quot;sizeof Son &#x3D; &quot; &lt;&lt; sizeof(s) &lt;&lt; endl;cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><pre><code>两个派生类继承同一个基类又有某个类同时继承者两个派生类这种继承被称为菱形继承，或者钻石继承</code></pre><p><strong>典型的菱形继承案例：</strong></p><p><img src="/2021/11/20/c-he-xin-bian-cheng/clip_image002.jpg" alt="IMG_256"></p><p><strong>菱形继承问题：</strong></p><ol><li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li><li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal&#123;public:int m_Age;&#125;;&#x2F;&#x2F;继承前加virtual关键字后，变为虚继承&#x2F;&#x2F;此时公共的父类Animal称为虚基类class Sheep : virtual public Animal &#123;&#125;;class Tuo   : virtual public Animal &#123;&#125;;class SheepTuo : public Sheep, public Tuo &#123;&#125;;void test01()&#123;SheepTuo st;st.Sheep::m_Age &#x3D; 100;st.Tuo::m_Age &#x3D; 200;cout &lt;&lt; &quot;st.Sheep::m_Age &#x3D; &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;cout &lt;&lt; &quot;st.Tuo::m_Age &#x3D; &quot; &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;cout &lt;&lt; &quot;st.m_Age &#x3D; &quot; &lt;&lt; st.m_Age &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal&#123;public:&#x2F;&#x2F;Speak函数就是虚函数&#x2F;&#x2F;函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。virtual void speak()&#123;cout &lt;&lt; &quot;动物在说话&quot; &lt;&lt; endl;&#125;&#125;;class Cat :public Animal&#123;public:void speak()&#123;cout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl;&#125;&#125;;class Dog :public Animal&#123;public:void speak()&#123;cout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;我们希望传入什么对象，那么就调用什么对象的函数&#x2F;&#x2F;如果函数地址在编译阶段就能确定，那么静态联编&#x2F;&#x2F;如果函数地址在运行阶段才能确定，就是动态联编void DoSpeak(Animal &amp; animal)&#123;animal.speak();&#125;&#x2F;&#x2F;&#x2F;&#x2F;多态满足条件： &#x2F;&#x2F;1、有继承关系&#x2F;&#x2F;2、子类重写父类中的虚函数&#x2F;&#x2F;多态使用：&#x2F;&#x2F;父类指针或引用指向子类对象void test01()&#123;Cat cat;DoSpeak(cat);Dog dog;DoSpeak(dog);&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p><h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;普通实现class Calculator &#123;public:int getResult(string oper)&#123;if (oper &#x3D;&#x3D; &quot;+&quot;) &#123;return m_Num1 + m_Num2;&#125;else if (oper &#x3D;&#x3D; &quot;-&quot;) &#123;return m_Num1 - m_Num2;&#125;else if (oper &#x3D;&#x3D; &quot;*&quot;) &#123;return m_Num1 * m_Num2;&#125;&#x2F;&#x2F;如果要提供新的运算，需要修改源码&#125;public:int m_Num1;int m_Num2;&#125;;void test01()&#123;&#x2F;&#x2F;普通实现测试Calculator c;c.m_Num1 &#x3D; 10;c.m_Num2 &#x3D; 10;cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;+&quot;) &lt;&lt; endl;cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl;cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;&#125;&#x2F;&#x2F;多态实现&#x2F;&#x2F;抽象计算器类&#x2F;&#x2F;多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护class AbstractCalculator&#123;public :virtual int getResult()&#123;return 0;&#125;int m_Num1;int m_Num2;&#125;;&#x2F;&#x2F;加法计算器class AddCalculator :public AbstractCalculator&#123;public:int getResult()&#123;return m_Num1 + m_Num2;&#125;&#125;;&#x2F;&#x2F;减法计算器class SubCalculator :public AbstractCalculator&#123;public:int getResult()&#123;return m_Num1 - m_Num2;&#125;&#125;;&#x2F;&#x2F;乘法计算器class MulCalculator :public AbstractCalculator&#123;public:int getResult()&#123;return m_Num1 * m_Num2;&#125;&#125;;void test02()&#123;&#x2F;&#x2F;创建加法计算器AbstractCalculator *abc &#x3D; new AddCalculator;abc-&gt;m_Num1 &#x3D; 10;abc-&gt;m_Num2 &#x3D; 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;  &#x2F;&#x2F;用完了记得销毁&#x2F;&#x2F;创建减法计算器abc &#x3D; new SubCalculator;abc-&gt;m_Num1 &#x3D; 10;abc-&gt;m_Num2 &#x3D; 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;  &#x2F;&#x2F;创建乘法计算器abc &#x3D; new MulCalculator;abc-&gt;m_Num1 &#x3D; 10;abc-&gt;m_Num2 &#x3D; 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;&#125;int main() &#123;&#x2F;&#x2F;test01();test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为==抽象类==</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base&#123;public:&#x2F;&#x2F;纯虚函数&#x2F;&#x2F;类中只要有一个纯虚函数就称为抽象类&#x2F;&#x2F;抽象类无法实例化对象&#x2F;&#x2F;子类必须重写父类中的纯虚函数，否则也属于抽象类virtual void func() &#x3D; 0;&#125;;class Son :public Base&#123;public:virtual void func() &#123;cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;&#125;;&#125;;void test01()&#123;Base * base &#x3D; NULL;&#x2F;&#x2F;base &#x3D; new Base; &#x2F;&#x2F; 错误，抽象类无法实例化对象base &#x3D; new Son;base-&gt;func();delete base;&#x2F;&#x2F;记得销毁&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="/2021/11/20/c-he-xin-bian-cheng/1545985945198.png" alt="1545985945198"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;抽象制作饮品class AbstractDrinking &#123;public:&#x2F;&#x2F;烧水virtual void Boil() &#x3D; 0;&#x2F;&#x2F;冲泡virtual void Brew() &#x3D; 0;&#x2F;&#x2F;倒入杯中virtual void PourInCup() &#x3D; 0;&#x2F;&#x2F;加入辅料virtual void PutSomething() &#x3D; 0;&#x2F;&#x2F;规定流程void MakeDrink() &#123;Boil();Brew();PourInCup();PutSomething();&#125;&#125;;&#x2F;&#x2F;制作咖啡class Coffee : public AbstractDrinking &#123;public:&#x2F;&#x2F;烧水virtual void Boil() &#123;cout &lt;&lt; &quot;煮农夫山泉!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;冲泡virtual void Brew() &#123;cout &lt;&lt; &quot;冲泡咖啡!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;倒入杯中virtual void PourInCup() &#123;cout &lt;&lt; &quot;将咖啡倒入杯中!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;加入辅料virtual void PutSomething() &#123;cout &lt;&lt; &quot;加入牛奶!&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;制作茶水class Tea : public AbstractDrinking &#123;public:&#x2F;&#x2F;烧水virtual void Boil() &#123;cout &lt;&lt; &quot;煮自来水!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;冲泡virtual void Brew() &#123;cout &lt;&lt; &quot;冲泡茶叶!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;倒入杯中virtual void PourInCup() &#123;cout &lt;&lt; &quot;将茶水倒入杯中!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;加入辅料virtual void PutSomething() &#123;cout &lt;&lt; &quot;加入枸杞!&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;业务函数void DoWork(AbstractDrinking* drink) &#123;drink-&gt;MakeDrink();delete drink;&#125;void test01() &#123;DoWork(new Coffee);cout &lt;&lt; &quot;--------------&quot; &lt;&lt; endl;DoWork(new Tea);&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名()&#123;&#125;</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名()&#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal &#123;public:Animal()&#123;cout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl;&#125;virtual void Speak() &#x3D; 0;&#x2F;&#x2F;析构函数加上virtual关键字，变成虚析构函数&#x2F;&#x2F;virtual ~Animal()&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;&#x2F;&#x2F;&#125;virtual ~Animal() &#x3D; 0;&#125;;Animal::~Animal()&#123;cout &lt;&lt; &quot;Animal 纯虚析构函数调用！&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。class Cat : public Animal &#123;public:Cat(string name)&#123;cout &lt;&lt; &quot;Cat构造函数调用！&quot; &lt;&lt; endl;m_Name &#x3D; new string(name);&#125;virtual void Speak()&#123;cout &lt;&lt; *m_Name &lt;&lt;  &quot;小猫在说话!&quot; &lt;&lt; endl;&#125;~Cat()&#123;cout &lt;&lt; &quot;Cat析构函数调用!&quot; &lt;&lt; endl;if (this-&gt;m_Name !&#x3D; NULL) &#123;delete m_Name;m_Name &#x3D; NULL;&#125;&#125;public:string *m_Name;&#125;;void test01()&#123;Animal *animal &#x3D; new Cat(&quot;Tom&quot;);animal-&gt;Speak();&#x2F;&#x2F;通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏&#x2F;&#x2F;怎么解决？给基类增加一个虚析构函数&#x2F;&#x2F;虚析构函数就是用来解决通过父类指针释放子类对象delete animal;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><pre><code>1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构3. 拥有纯虚析构函数的类也属于抽象类</code></pre><h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F;抽象CPU类class CPU&#123;public:&#x2F;&#x2F;抽象的计算函数virtual void calculate() &#x3D; 0;&#125;;&#x2F;&#x2F;抽象显卡类class VideoCard&#123;public:&#x2F;&#x2F;抽象的显示函数virtual void display() &#x3D; 0;&#125;;&#x2F;&#x2F;抽象内存条类class Memory&#123;public:&#x2F;&#x2F;抽象的存储函数virtual void storage() &#x3D; 0;&#125;;&#x2F;&#x2F;电脑类class Computer&#123;public:Computer(CPU * cpu, VideoCard * vc, Memory * mem)&#123;m_cpu &#x3D; cpu;m_vc &#x3D; vc;m_mem &#x3D; mem;&#125;&#x2F;&#x2F;提供工作的函数void work()&#123;&#x2F;&#x2F;让零件工作起来，调用接口m_cpu-&gt;calculate();m_vc-&gt;display();m_mem-&gt;storage();&#125;&#x2F;&#x2F;提供析构函数 释放3个电脑零件~Computer()&#123;&#x2F;&#x2F;释放CPU零件if (m_cpu !&#x3D; NULL)&#123;delete m_cpu;m_cpu &#x3D; NULL;&#125;&#x2F;&#x2F;释放显卡零件if (m_vc !&#x3D; NULL)&#123;delete m_vc;m_vc &#x3D; NULL;&#125;&#x2F;&#x2F;释放内存条零件if (m_mem !&#x3D; NULL)&#123;delete m_mem;m_mem &#x3D; NULL;&#125;&#125;private:CPU * m_cpu; &#x2F;&#x2F;CPU的零件指针VideoCard * m_vc; &#x2F;&#x2F;显卡零件指针Memory * m_mem; &#x2F;&#x2F;内存条零件指针&#125;;&#x2F;&#x2F;具体厂商&#x2F;&#x2F;Intel厂商class IntelCPU :public CPU&#123;public:virtual void calculate()&#123;cout &lt;&lt; &quot;Intel的CPU开始计算了！&quot; &lt;&lt; endl;&#125;&#125;;class IntelVideoCard :public VideoCard&#123;public:virtual void display()&#123;cout &lt;&lt; &quot;Intel的显卡开始显示了！&quot; &lt;&lt; endl;&#125;&#125;;class IntelMemory :public Memory&#123;public:virtual void storage()&#123;cout &lt;&lt; &quot;Intel的内存条开始存储了！&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;Lenovo厂商class LenovoCPU :public CPU&#123;public:virtual void calculate()&#123;cout &lt;&lt; &quot;Lenovo的CPU开始计算了！&quot; &lt;&lt; endl;&#125;&#125;;class LenovoVideoCard :public VideoCard&#123;public:virtual void display()&#123;cout &lt;&lt; &quot;Lenovo的显卡开始显示了！&quot; &lt;&lt; endl;&#125;&#125;;class LenovoMemory :public Memory&#123;public:virtual void storage()&#123;cout &lt;&lt; &quot;Lenovo的内存条开始存储了！&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;第一台电脑零件CPU * intelCpu &#x3D; new IntelCPU;VideoCard * intelCard &#x3D; new IntelVideoCard;Memory * intelMem &#x3D; new IntelMemory;cout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl;&#x2F;&#x2F;创建第一台电脑Computer * computer1 &#x3D; new Computer(intelCpu, intelCard, intelMem);computer1-&gt;work();delete computer1;cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;cout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl;&#x2F;&#x2F;第二台电脑组装Computer * computer2 &#x3D; new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;computer2-&gt;work();delete computer2;cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;cout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl;&#x2F;&#x2F;第三台电脑组装Computer * computer3 &#x3D; new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;computer3-&gt;work();delete computer3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p><ol><li><p>包含头文件   </p><p>  #include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;void test01()&#123;ofstream ofs;ofs.open(&quot;test.txt&quot;, ios::out);ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;ofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl;ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;ofs.close();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件   </p><p>  #include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;void test01()&#123;ifstream ifs;ifs.open(&quot;test.txt&quot;, ios::in);if (!ifs.is_open())&#123;cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;return;&#125;&#x2F;&#x2F;第一种方式&#x2F;&#x2F;char buf[1024] &#x3D; &#123; 0 &#125;;&#x2F;&#x2F;while (ifs &gt;&gt; buf)&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; buf &lt;&lt; endl;&#x2F;&#x2F;&#125;&#x2F;&#x2F;第二种&#x2F;&#x2F;char buf[1024] &#x3D; &#123; 0 &#125;;&#x2F;&#x2F;while (ifs.getline(buf,sizeof(buf)))&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; buf &lt;&lt; endl;&#x2F;&#x2F;&#125;&#x2F;&#x2F;第三种&#x2F;&#x2F;string buf;&#x2F;&#x2F;while (getline(ifs, buf))&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; buf &lt;&lt; endl;&#x2F;&#x2F;&#125;char c;while ((c &#x3D; ifs.get()) !&#x3D; EOF)&#123;cout &lt;&lt; c;&#125;ifs.close();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>读文件可以利用 ifstream  ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件 </li></ul><h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 ==ios::binary==</p><h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person&#123;public:char m_Name[64];int m_Age;&#125;;&#x2F;&#x2F;二进制文件  写文件void test01()&#123;&#x2F;&#x2F;1、包含头文件&#x2F;&#x2F;2、创建输出流对象ofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);&#x2F;&#x2F;3、打开文件&#x2F;&#x2F;ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);Person p &#x3D; &#123;&quot;张三&quot;  , 18&#125;;&#x2F;&#x2F;4、写文件ofs.write((const char *)&amp;p, sizeof(p));&#x2F;&#x2F;5、关闭文件ofs.close();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person&#123;public:char m_Name[64];int m_Age;&#125;;void test01()&#123;ifstream ifs(&quot;person.txt&quot;, ios::in | ios::binary);if (!ifs.is_open())&#123;cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;&#125;Person p;ifs.read((char *)&amp;p, sizeof(p));cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-核心编程&quot;&gt;&lt;a href=&quot;#C-核心编程&quot; class=&quot;headerlink&quot; title=&quot;C++核心编程&quot;&gt;&lt;/a&gt;C++核心编程&lt;/h1&gt;&lt;p&gt;本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++基础入门</title>
    <link href="https://oxford561.github.io/2021/11/20/c-ji-chu-ru-men/"/>
    <id>https://oxford561.github.io/2021/11/20/c-ji-chu-ru-men/</id>
    <published>2021-11-20T08:05:27.000Z</published>
    <updated>2021-11-20T08:08:31.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><pre><code>Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</code></pre><p><img src="/2021/11/20/c-ji-chu-ru-men/1541383178746.png" alt="1541383178746"></p><p><img src="/2021/11/20/c-ji-chu-ru-men/1541384366413.png" alt="1541384366413"></p><h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p><p><img src="/2021/11/20/c-ji-chu-ru-men/1541383817248.png" alt="1541383817248"></p><p>给C++文件起个名称，然后点击添加即可。</p><p><img src="/2021/11/20/c-ji-chu-ru-men/1541384140042.png" alt="1541384140042"></p><h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main() &#123;cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="/2021/11/20/c-ji-chu-ru-men/1541384818688.png" alt="1541384818688"></p><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> <ul><li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，==对该段代码做整体说明==</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main() &#123;&#x2F;&#x2F;变量的定义&#x2F;&#x2F;语法：数据类型  变量名 &#x3D; 初始值int a &#x3D; 10;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul><li>==通常在文件上方定义==，表示一个常量</li></ul></li></ol><ol start="2"><li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul><li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1、宏常量#define day 7int main() &#123;cout &lt;&lt; &quot;一周里总共有 &quot; &lt;&lt; day &lt;&lt; &quot; 天&quot; &lt;&lt; endl;&#x2F;&#x2F;day &#x3D; 8;  &#x2F;&#x2F;报错，宏常量不可以修改&#x2F;&#x2F;2、const修饰变量const int month &#x3D; 12;cout &lt;&lt; &quot;一年里总共有 &quot; &lt;&lt; month &lt;&lt; &quot; 个月份&quot; &lt;&lt; endl;&#x2F;&#x2F;month &#x3D; 24; &#x2F;&#x2F;报错，常量是不可以修改的system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;cout &lt;&lt; &quot;short 类型所占内存空间为： &quot; &lt;&lt; sizeof(short) &lt;&lt; endl;cout &lt;&lt; &quot;int 类型所占内存空间为： &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;cout &lt;&lt; &quot;long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long) &lt;&lt; endl;cout &lt;&lt; &quot;long long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long long) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p></blockquote><h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p><p>浮点型变量分为两种：</p><ol><li>单精度float </li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;float f1 &#x3D; 3.14f;double d1 &#x3D; 3.14;cout &lt;&lt; f1 &lt;&lt; endl;cout &lt;&lt; d1&lt;&lt; endl;cout &lt;&lt; &quot;float  sizeof &#x3D; &quot; &lt;&lt; sizeof(f1) &lt;&lt; endl;cout &lt;&lt; &quot;double sizeof &#x3D; &quot; &lt;&lt; sizeof(d1) &lt;&lt; endl;&#x2F;&#x2F;科学计数法float f2 &#x3D; 3e2; &#x2F;&#x2F; 3 * 10 ^ 2 cout &lt;&lt; &quot;f2 &#x3D; &quot; &lt;&lt; f2 &lt;&lt; endl;float f3 &#x3D; 3e-2;  &#x2F;&#x2F; 3 * 0.1 ^ 2cout &lt;&lt; &quot;f3 &#x3D; &quot; &lt;&lt; f3 &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;char ch &#x3D; &#39;a&#39;;cout &lt;&lt; ch &lt;&lt; endl;cout &lt;&lt; sizeof(char) &lt;&lt; endl;&#x2F;&#x2F;ch &#x3D; &quot;abcde&quot;; &#x2F;&#x2F;错误，不可以用双引号&#x2F;&#x2F;ch &#x3D; &#39;abcde&#39;; &#x2F;&#x2F;错误，单引号内只能引用一个字符cout &lt;&lt; (int)ch &lt;&lt; endl;  &#x2F;&#x2F;查看字符a对应的ASCII码ch &#x3D; 97; &#x2F;&#x2F;可以直接用ASCII给字符型变量赋值cout &lt;&lt; ch &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p><p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>*<em>\\*</em></td><td><strong>代表一个反斜线字符”&quot;</strong></td><td><strong>092</strong></td></tr><tr><td>&#39;</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>&quot;</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;cout &lt;&lt; &quot;\\&quot; &lt;&lt; endl;cout &lt;&lt; &quot;\tHello&quot; &lt;&lt; endl;cout &lt;&lt; &quot;\n&quot; &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;char str1[] &#x3D; &quot;hello world&quot;;cout &lt;&lt; str1 &lt;&lt; endl;    system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol><li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;string str &#x3D; &quot;hello world&quot;;cout &lt;&lt; str &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p></blockquote><h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p><p>bool类型只有两个值：</p><ul><li>true  — 真（本质是1）</li><li>false — 假（本质是0）</li></ul><p><strong>bool类型占==1个字节==大小</strong></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;bool flag &#x3D; true;cout &lt;&lt; flag &lt;&lt; endl; &#x2F;&#x2F; 1flag &#x3D; false;cout &lt;&lt; flag &lt;&lt; endl; &#x2F;&#x2F; 0cout &lt;&lt; &quot;size of bool &#x3D; &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl; &#x2F;&#x2F;1system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main()&#123;&#x2F;&#x2F;整型输入int a &#x3D; 0;cout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl;cin &gt;&gt; a;cout &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F;浮点型输入double d &#x3D; 0;cout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl;cin &gt;&gt; d;cout &lt;&lt; d &lt;&lt; endl;&#x2F;&#x2F;字符型输入char ch &#x3D; 0;cout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl;cin &gt;&gt; ch;cout &lt;&lt; ch &lt;&lt; endl;&#x2F;&#x2F;字符串型输入string str;cout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl;cin &gt;&gt; str;cout &lt;&lt; str &lt;&lt; endl;&#x2F;&#x2F;布尔类型输入bool flag &#x3D; true;cout &lt;&lt; &quot;请输入布尔型变量：&quot; &lt;&lt; endl;cin &gt;&gt; flag;cout &lt;&lt; flag &lt;&lt; endl;system(&quot;pause&quot;);return EXIT_SUCCESS;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>/</td><td>除</td><td>10 / 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a=2; b=++a;</td><td>a=3; b=3;</td></tr><tr><td>++</td><td>后置递增</td><td>a=2; b=a++;</td><td>a=3; b=2;</td></tr><tr><td>–</td><td>前置递减</td><td>a=2; b=–a;</td><td>a=1; b=1;</td></tr><tr><td>–</td><td>后置递减</td><td>a=2; b=a–;</td><td>a=1; b=2;</td></tr></tbody></table><p><strong>示例1：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;加减乘除int main() &#123;int a1 &#x3D; 10;int b1 &#x3D; 3;cout &lt;&lt; a1 + b1 &lt;&lt; endl;cout &lt;&lt; a1 - b1 &lt;&lt; endl;cout &lt;&lt; a1 * b1 &lt;&lt; endl;cout &lt;&lt; a1 &#x2F; b1 &lt;&lt; endl;  &#x2F;&#x2F;两个整数相除结果依然是整数int a2 &#x3D; 10;int b2 &#x3D; 20;cout &lt;&lt; a2 &#x2F; b2 &lt;&lt; endl; int a3 &#x3D; 10;int b3 &#x3D; 0;&#x2F;&#x2F;cout &lt;&lt; a3 &#x2F; b3 &lt;&lt; endl; &#x2F;&#x2F;报错，除数不可以为0&#x2F;&#x2F;两个小数可以相除double d1 &#x3D; 0.5;double d2 &#x3D; 0.25;cout &lt;&lt; d1 &#x2F; d2 &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;取模int main() &#123;int a1 &#x3D; 10;int b1 &#x3D; 3;cout &lt;&lt; 10 % 3 &lt;&lt; endl;int a2 &#x3D; 10;int b2 &#x3D; 20;cout &lt;&lt; a2 % b2 &lt;&lt; endl;int a3 &#x3D; 10;int b3 &#x3D; 0;&#x2F;&#x2F;cout &lt;&lt; a3 % b3 &lt;&lt; endl; &#x2F;&#x2F;取模运算时，除数也不能为0&#x2F;&#x2F;两个小数不可以取模double d1 &#x3D; 3.14;double d2 &#x3D; 1.1;&#x2F;&#x2F;cout &lt;&lt; d1 % d2 &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：只有整型变量可以进行取模运算</p></blockquote><p><strong>示例3：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;递增int main() &#123;&#x2F;&#x2F;后置递增int a &#x3D; 10;a++; &#x2F;&#x2F;等价于a &#x3D; a + 1cout &lt;&lt; a &lt;&lt; endl; &#x2F;&#x2F; 11&#x2F;&#x2F;前置递增int b &#x3D; 10;++b;cout &lt;&lt; b &lt;&lt; endl; &#x2F;&#x2F; 11&#x2F;&#x2F;区别&#x2F;&#x2F;前置递增先对变量进行++，再计算表达式int a2 &#x3D; 10;int b2 &#x3D; ++a2 * 10;cout &lt;&lt; b2 &lt;&lt; endl;&#x2F;&#x2F;后置递增先计算表达式，后对变量进行++int a3 &#x3D; 10;int b3 &#x3D; a3++ * 10;cout &lt;&lt; b3 &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=2; b=3;</td><td>a=2; b=3;</td></tr><tr><td>+=</td><td>加等于</td><td>a=0; a+=2;</td><td>a=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=5; a-=3;</td><td>a=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2; a*=2;</td><td>a=4;</td></tr><tr><td>/=</td><td>除等于</td><td>a=4; a/=2;</td><td>a=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3; a%2;</td><td>a=1;</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;赋值运算符&#x2F;&#x2F; &#x3D;int a &#x3D; 10;a &#x3D; 100;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; +&#x3D;a &#x3D; 10;a +&#x3D; 2; &#x2F;&#x2F; a &#x3D; a + 2;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; -&#x3D;a &#x3D; 10;a -&#x3D; 2; &#x2F;&#x2F; a &#x3D; a - 2cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; *&#x3D;a &#x3D; 10;a *&#x3D; 2; &#x2F;&#x2F; a &#x3D; a * 2cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; &#x2F;&#x3D;a &#x3D; 10;a &#x2F;&#x3D; 2;  &#x2F;&#x2F; a &#x3D; a &#x2F; 2;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; %&#x3D;a &#x3D; 10;a %&#x3D; 2;  &#x2F;&#x2F; a &#x3D; a % 2;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4 == 3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4 != 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 1</td><td>1</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int a &#x3D; 10;int b &#x3D; 20;cout &lt;&lt; (a &#x3D;&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 0 cout &lt;&lt; (a !&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 1cout &lt;&lt; (a &gt; b) &lt;&lt; endl; &#x2F;&#x2F; 0cout &lt;&lt; (a &lt; b) &lt;&lt; endl; &#x2F;&#x2F; 1cout &lt;&lt; (a &gt;&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 0cout &lt;&lt; (a &lt;&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 1system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p></blockquote><h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例1：</strong>逻辑非</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;逻辑运算符  --- 非int main() &#123;int a &#x3D; 10;cout &lt;&lt; !a &lt;&lt; endl; &#x2F;&#x2F; 0cout &lt;&lt; !!a &lt;&lt; endl; &#x2F;&#x2F; 1system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 真变假，假变真</p></blockquote><p><strong>示例2：</strong>逻辑与</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;逻辑运算符  --- 与int main() &#123;int a &#x3D; 10;int b &#x3D; 10;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;&#x2F;&#x2F; 1a &#x3D; 10;b &#x3D; 0;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;&#x2F;&#x2F; 0 a &#x3D; 0;b &#x3D; 0;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;&#x2F;&#x2F; 0system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p></blockquote><p><strong>示例3：</strong>逻辑或</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;逻辑运算符  --- 或int main() &#123;int a &#x3D; 10;int b &#x3D; 10;cout &lt;&lt; (a || b) &lt;&lt; endl;&#x2F;&#x2F; 1a &#x3D; 10;b &#x3D; 0;cout &lt;&lt; (a || b) &lt;&lt; endl;&#x2F;&#x2F; 1 a &#x3D; 0;b &#x3D; 0;cout &lt;&lt; (a || b) &lt;&lt; endl;&#x2F;&#x2F; 0system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>逻辑==或==运算符总结： ==同假为假，其余为真==</p></blockquote><h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p></li></ul><ol><li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p><p><img src="/2021/11/20/c-ji-chu-ru-men/clip_image002.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;选择结构-单行if语句&#x2F;&#x2F;输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印int score &#x3D; 0;cout &lt;&lt; &quot;请输入一个分数：&quot; &lt;&lt; endl;cin &gt;&gt; score;cout &lt;&lt; &quot;您输入的分数为： &quot; &lt;&lt; score &lt;&lt; endl;&#x2F;&#x2F;if语句&#x2F;&#x2F;注意事项，在if判断语句后面，不要加分号if (score &gt; 600)&#123;cout &lt;&lt; &quot;我考上了一本大学！！！&quot; &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2"><li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li></ol><p><img src="/2021/11/20/c-ji-chu-ru-men/clip_image002-1541662519170.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int score &#x3D; 0;cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600)&#123;cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;我未考上一本大学&quot; &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li></ol><p><img src="/2021/11/20/c-ji-chu-ru-men/clip_image002-1541662566808.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int score &#x3D; 0;cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600)&#123;cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;&#125;else if (score &gt; 500)&#123;cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;&#125;else if (score &gt; 400)&#123;cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() &#123;int score &#x3D; 0;cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600)&#123;cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;if (score &gt; 700)&#123;cout &lt;&lt; &quot;我考上了北大&quot; &lt;&lt; endl;&#125;else if (score &gt; 650)&#123;cout &lt;&lt; &quot;我考上了清华&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;我考上了人大&quot; &lt;&lt; endl;&#125;&#125;else if (score &gt; 500)&#123;cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;&#125;else if (score &gt; 400)&#123;cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例：</strong> 三只小猪称体重</p><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="/2021/11/20/c-ji-chu-ru-men/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg" alt="三只小猪"></p><h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int a &#x3D; 10;int b &#x3D; 20;int c &#x3D; 0;c &#x3D; a &gt; b ? a : b;cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;&#x2F;&#x2F;C++中三目运算符返回的是变量,可以继续赋值(a &gt; b ? a : b) &#x3D; 100;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">switch(表达式)&#123;case 结果1：执行语句;break;case 结果2：执行语句;break;...default:执行语句;break;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;请给电影评分 &#x2F;&#x2F;10 ~ 9   经典   &#x2F;&#x2F; 8 ~ 7   非常好&#x2F;&#x2F; 6 ~ 5   一般&#x2F;&#x2F; 5分以下 烂片int score &#x3D; 0;cout &lt;&lt; &quot;请给电影打分&quot; &lt;&lt; endl;cin &gt;&gt; score;switch (score)&#123;case 10:case 9:cout &lt;&lt; &quot;经典&quot; &lt;&lt; endl;break;case 8:cout &lt;&lt; &quot;非常好&quot; &lt;&lt; endl;break;case 7:case 6:cout &lt;&lt; &quot;一般&quot; &lt;&lt; endl;break;default:cout &lt;&lt; &quot;烂片&quot; &lt;&lt; endl;break;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p><p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p><p><img src="/2021/11/20/c-ji-chu-ru-men/clip_image002-1541668640382.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int num &#x3D; 0;while (num &lt; 10)&#123;cout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;num++;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><p><strong>while循环练习案例：</strong>==猜数字==</p><p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><p><img src="/2021/11/20/c-ji-chu-ru-men/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg" alt="猜数字"></p><h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p><p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p><p><img src="/2021/11/20/c-ji-chu-ru-men/clip_image002-1541671163478.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int num &#x3D; 0;do&#123;cout &lt;&lt; num &lt;&lt; endl;num++;&#125; while (num &lt; 10);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p></blockquote><p><strong>练习案例：水仙花数</strong></p><p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p><p>例如：1^3 + 5^3+ 3^3 = 153</p><p>请利用do…while语句，求出所有3位数中的水仙花数</p><h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;for (int i &#x3D; 0; i &lt; 10; i++)&#123;cout &lt;&lt; i &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>详解：</strong></p><p><img src="/2021/11/20/c-ji-chu-ru-men/1541673704101.png" alt="1541673704101"></p><blockquote><p>注意：for循环中的表达式，要用分号进行分隔</p></blockquote><blockquote><p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p></blockquote><p><strong>练习案例：敲桌子</strong></p><p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p><p><img src="/2021/11/20/c-ji-chu-ru-men/timg.gif" alt="timg"></p><h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><p><img src="/2021/11/20/c-ji-chu-ru-men/1541676003486.png" alt="1541676003486"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;外层循环执行1次，内层循环执行1轮for (int i &#x3D; 0; i &lt; 10; i++)&#123;for (int j &#x3D; 0; j &lt; 10; j++)&#123;cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例：</strong>乘法口诀表</p><p>案例描述：利用嵌套循环，实现九九乘法表</p><p><img src="/2021/11/20/c-ji-chu-ru-men/0006018857256120_b.jpg" alt="0006018857256120_b"></p><h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例1：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;1、在switch 语句中使用breakcout &lt;&lt; &quot;请选择您挑战副本的难度：&quot; &lt;&lt; endl;cout &lt;&lt; &quot;1、普通&quot; &lt;&lt; endl;cout &lt;&lt; &quot;2、中等&quot; &lt;&lt; endl;cout &lt;&lt; &quot;3、困难&quot; &lt;&lt; endl;int num &#x3D; 0;cin &gt;&gt; num;switch (num)&#123;case 1:cout &lt;&lt; &quot;您选择的是普通难度&quot; &lt;&lt; endl;break;case 2:cout &lt;&lt; &quot;您选择的是中等难度&quot; &lt;&lt; endl;break;case 3:cout &lt;&lt; &quot;您选择的是困难难度&quot; &lt;&lt; endl;break;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;2、在循环语句中用breakfor (int i &#x3D; 0; i &lt; 10; i++)&#123;if (i &#x3D;&#x3D; 5)&#123;break; &#x2F;&#x2F;跳出循环语句&#125;cout &lt;&lt; i &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例3：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;在嵌套循环语句中使用break，退出内层循环for (int i &#x3D; 0; i &lt; 10; i++)&#123;for (int j &#x3D; 0; j &lt; 10; j++)&#123;if (j &#x3D;&#x3D; 5)&#123;break;&#125;cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;for (int i &#x3D; 0; i &lt; 100; i++)&#123;if (i % 2 &#x3D;&#x3D; 0)&#123;continue;&#125;cout &lt;&lt; i &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：continue并没有使整个循环终止，而break会跳出循环</p></blockquote><h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;goto FLAG;cout &lt;&lt; &quot;2&quot; &lt;&lt; endl;cout &lt;&lt; &quot;3&quot; &lt;&lt; endl;cout &lt;&lt; &quot;4&quot; &lt;&lt; endl;FLAG:cout &lt;&lt; &quot;5&quot; &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p></blockquote><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p><p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p><p><img src="/2021/11/20/c-ji-chu-ru-men/1541748375356.png" alt="1541748375356"></p><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li><li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;定义方式1&#x2F;&#x2F;数据类型 数组名[元素个数];int score[10];&#x2F;&#x2F;利用下标赋值score[0] &#x3D; 100;score[1] &#x3D; 99;score[2] &#x3D; 85;&#x2F;&#x2F;利用下标输出cout &lt;&lt; score[0] &lt;&lt; endl;cout &lt;&lt; score[1] &lt;&lt; endl;cout &lt;&lt; score[2] &lt;&lt; endl;&#x2F;&#x2F;第二种定义方式&#x2F;&#x2F;数据类型 数组名[元素个数] &#x3D;  &#123;值1，值2 ，值3 ...&#125;;&#x2F;&#x2F;如果&#123;&#125;内不足10个数据，剩余数据用0补全int score2[10] &#x3D; &#123; 100, 90,80,70,60,50,40,30,20,10 &#125;;&#x2F;&#x2F;逐个输出&#x2F;&#x2F;cout &lt;&lt; score2[0] &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; score2[1] &lt;&lt; endl;&#x2F;&#x2F;一个一个输出太麻烦，因此可以利用循环进行输出for (int i &#x3D; 0; i &lt; 10; i++)&#123;cout &lt;&lt; score2[i] &lt;&lt; endl;&#125;&#x2F;&#x2F;定义方式3&#x2F;&#x2F;数据类型 数组名[] &#x3D;  &#123;值1，值2 ，值3 ...&#125;;int score3[] &#x3D; &#123; 100,90,80,70,60,50,40,30,20,10 &#125;;for (int i &#x3D; 0; i &lt; 10; i++)&#123;cout &lt;&lt; score3[i] &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p></blockquote><blockquote><p>总结2：数组中下标是从0开始索引</p></blockquote><h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;数组名用途&#x2F;&#x2F;1、可以获取整个数组占用内存空间大小int arr[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;cout &lt;&lt; &quot;整个数组所占内存空间为： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;cout &lt;&lt; &quot;每个元素所占内存空间为： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; &quot;数组的元素个数为： &quot; &lt;&lt; sizeof(arr) &#x2F; sizeof(arr[0]) &lt;&lt; endl;&#x2F;&#x2F;2、可以通过数组名获取到数组首地址cout &lt;&lt; &quot;数组首地址为： &quot; &lt;&lt; (int)arr &lt;&lt; endl;cout &lt;&lt; &quot;数组中第一个元素地址为： &quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;cout &lt;&lt; &quot;数组中第二个元素地址为： &quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;&#x2F;&#x2F;arr &#x3D; 100; 错误，数组名是常量，因此不可以赋值system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><p><strong>练习案例1</strong>：五只小猪称体重</p><p><strong>案例描述：</strong></p><p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p><p>找出并打印最重的小猪体重。</p><p><strong>练习案例2：</strong>数组元素逆置</p><p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p><p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p><h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><p><img src="/2021/11/20/c-ji-chu-ru-men/1541905327273.png" alt="1541905327273"></p><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int arr[9] &#x3D; &#123; 4,2,8,0,5,7,1,3,9 &#125;;for (int i &#x3D; 0; i &lt; 9 - 1; i++)&#123;for (int j &#x3D; 0; j &lt; 9 - 1 - i; j++)&#123;if (arr[j] &gt; arr[j + 1])&#123;int temp &#x3D; arr[j];arr[j] &#x3D; arr[j + 1];arr[j + 1] &#x3D; temp;&#125;&#125;&#125;for (int i &#x3D; 0; i &lt; 9; i++)&#123;cout &lt;&lt; arr[i] &lt;&lt; endl;&#125;    system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p><p><img src="/2021/11/20/c-ji-chu-ru-men/1541905559138.png" alt="1541905559138"></p><h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li><li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li></ol><blockquote><p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p></blockquote><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;方式1  &#x2F;&#x2F;数组类型 数组名 [行数][列数]int arr[2][3];arr[0][0] &#x3D; 1;arr[0][1] &#x3D; 2;arr[0][2] &#x3D; 3;arr[1][0] &#x3D; 4;arr[1][1] &#x3D; 5;arr[1][2] &#x3D; 6;for (int i &#x3D; 0; i &lt; 2; i++)&#123;for (int j &#x3D; 0; j &lt; 3; j++)&#123;cout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#125;&#x2F;&#x2F;方式2 &#x2F;&#x2F;数据类型 数组名[行数][列数] &#x3D; &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;int arr2[2][3] &#x3D;&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;&#x2F;&#x2F;方式3&#x2F;&#x2F;数据类型 数组名[行数][列数] &#x3D; &#123; 数据1，数据2 ,数据3，数据4  &#125;;int arr3[2][3] &#x3D; &#123; 1,2,3,4,5,6 &#125;; &#x2F;&#x2F;方式4 &#x2F;&#x2F;数据类型 数组名[][列数] &#x3D; &#123; 数据1，数据2 ,数据3，数据4  &#125;;int arr4[][3] &#x3D; &#123; 1,2,3,4,5,6 &#125;;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;二维数组数组名int arr[2][3] &#x3D;&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;cout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;cout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;cout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) &#x2F; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) &#x2F; sizeof(arr[0][0]) &lt;&lt; endl;&#x2F;&#x2F;地址cout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl;cout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl;cout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl;cout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;cout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：二维数组名就是这个数组的首地址</p></blockquote><blockquote><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote><h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int scores[3][3] &#x3D;&#123;&#123;100,100,100&#125;,&#123;90,50,100&#125;,&#123;60,70,80&#125;,&#125;;string names[3] &#x3D; &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;;for (int i &#x3D; 0; i &lt; 3; i++)&#123;int sum &#x3D; 0;for (int j &#x3D; 0; j &lt; 3; j++)&#123;sum +&#x3D; scores[i][j];&#125;cout &lt;&lt; names[i] &lt;&lt; &quot;同学总成绩为： &quot; &lt;&lt; sum &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型 </p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句 </p><p>5、return 表达式</p><p><strong>语法：</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">返回值类型 函数名 （参数列表）&#123;       函数体语句       return表达式&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数定义int add(int num1, int num2)&#123;int sum &#x3D; num1 + num2;return sum;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code> 函数名（参数）</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数定义int add(int num1, int num2) &#x2F;&#x2F;定义中的num1,num2称为形式参数，简称形参&#123;int sum &#x3D; num1 + num2;return sum;&#125;int main() &#123;int a &#x3D; 10;int b &#x3D; 10;&#x2F;&#x2F;调用add函数int sum &#x3D; add(a, b);&#x2F;&#x2F;调用时的a，b称为实际参数，简称实参cout &lt;&lt; &quot;sum &#x3D; &quot; &lt;&lt; sum &lt;&lt; endl;a &#x3D; 100;b &#x3D; 100;sum &#x3D; add(a, b);cout &lt;&lt; &quot;sum &#x3D; &quot; &lt;&lt; sum &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p></blockquote><h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，==如果形参发生，并不会影响实参==</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void swap(int num1, int num2)&#123;cout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;cout &lt;&lt; &quot;num1 &#x3D; &quot; &lt;&lt; num1 &lt;&lt; endl;cout &lt;&lt; &quot;num2 &#x3D; &quot; &lt;&lt; num2 &lt;&lt; endl;int temp &#x3D; num1;num1 &#x3D; num2;num2 &#x3D; temp;cout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;cout &lt;&lt; &quot;num1 &#x3D; &quot; &lt;&lt; num1 &lt;&lt; endl;cout &lt;&lt; &quot;num2 &#x3D; &quot; &lt;&lt; num2 &lt;&lt; endl;&#x2F;&#x2F;return ; 当函数声明时候，不需要返回值，可以不写return&#125;int main() &#123;int a &#x3D; 10;int b &#x3D; 20;swap(a, b);cout &lt;&lt; &quot;mian中的 a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;mian中的 b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数常见样式&#x2F;&#x2F;1、 无参无返void test01()&#123;&#x2F;&#x2F;void a &#x3D; 10; &#x2F;&#x2F;无类型不可以创建变量,原因无法分配内存cout &lt;&lt; &quot;this is test01&quot; &lt;&lt; endl;&#x2F;&#x2F;test01(); 函数调用&#125;&#x2F;&#x2F;2、 有参无返void test02(int a)&#123;cout &lt;&lt; &quot;this is test02&quot; &lt;&lt; endl;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#125;&#x2F;&#x2F;3、无参有返int test03()&#123;cout &lt;&lt; &quot;this is test03 &quot; &lt;&lt; endl;return 10;&#125;&#x2F;&#x2F;4、有参有返int test04(int a, int b)&#123;cout &lt;&lt; &quot;this is test04 &quot; &lt;&lt; endl;int sum &#x3D; a + b;return sum;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li> 函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;声明可以多次，定义只能一次&#x2F;&#x2F;声明int max(int a, int b);int max(int a, int b);&#x2F;&#x2F;定义int max(int a, int b)&#123;return a &gt; b ? a : b;&#125;int main() &#123;int a &#x3D; 100;int b &#x3D; 200;cout &lt;&lt; max(a, b) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件  </li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;swap.h文件#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F;实现两个数字交换的函数声明void swap(int a, int b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;swap.cpp文件#include &quot;swap.h&quot;void swap(int a, int b)&#123;int temp &#x3D; a;a &#x3D; b;b &#x3D; temp;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;main函数文件#include &quot;swap.h&quot;int main() &#123;int a &#x3D; 100;int b &#x3D; 200;swap(a, b);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li>内存编号是从0开始记录的，一般用十六进制数字表示</li><li>可以利用指针变量保存地址</li></ul><h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;1、指针的定义int a &#x3D; 10; &#x2F;&#x2F;定义整型变量a&#x2F;&#x2F;指针定义语法： 数据类型 * 变量名 ;int * p;&#x2F;&#x2F;指针变量赋值p &#x3D; &amp;a; &#x2F;&#x2F;指针指向变量a的地址cout &lt;&lt; &amp;a &lt;&lt; endl; &#x2F;&#x2F;打印数据a的地址cout &lt;&lt; p &lt;&lt; endl;  &#x2F;&#x2F;打印指针变量p&#x2F;&#x2F;2、指针的使用&#x2F;&#x2F;通过*操作指针变量指向的内存cout &lt;&lt; &quot;*p &#x3D; &quot; &lt;&lt; *p &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int a &#x3D; 10;int * p;p &#x3D; &amp;a; &#x2F;&#x2F;指针指向数据a的地址cout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;* 解引用cout &lt;&lt; sizeof(p) &lt;&lt; endl;cout &lt;&lt; sizeof(char *) &lt;&lt; endl;cout &lt;&lt; sizeof(float *) &lt;&lt; endl;cout &lt;&lt; sizeof(double *) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><p><strong>示例1：空指针</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;指针变量p指向内存地址编号为0的空间int * p &#x3D; NULL;&#x2F;&#x2F;访问空指针报错 &#x2F;&#x2F;内存编号0 ~255为系统占用内存，不允许用户访问cout &lt;&lt; *p &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例2：野指针</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;指针变量p指向内存地址编号为0x1100的空间int * p &#x3D; (int *)0x1100;&#x2F;&#x2F;访问野指针报错 cout &lt;&lt; *p &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p><ol><li>const修饰指针   — 常量指针</li><li>const修饰常量   — 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() &#123;int a &#x3D; 10;int b &#x3D; 10;&#x2F;&#x2F;const修饰的是指针，指针指向可以改，指针指向的值不可以更改const int * p1 &#x3D; &amp;a; p1 &#x3D; &amp;b; &#x2F;&#x2F;正确&#x2F;&#x2F;*p1 &#x3D; 100;  报错&#x2F;&#x2F;const修饰的是常量，指针指向不可以改，指针指向的值可以更改int * const p2 &#x3D; &amp;a;&#x2F;&#x2F;p2 &#x3D; &amp;b; &#x2F;&#x2F;错误*p2 &#x3D; 100; &#x2F;&#x2F;正确    &#x2F;&#x2F;const既修饰指针又修饰常量const int * const p3 &#x3D; &amp;a;&#x2F;&#x2F;p3 &#x3D; &amp;b; &#x2F;&#x2F;错误&#x2F;&#x2F;*p3 &#x3D; 100; &#x2F;&#x2F;错误system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p></blockquote><h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int arr[] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;int * p &#x3D; arr;  &#x2F;&#x2F;指向数组的指针cout &lt;&lt; &quot;第一个元素： &quot; &lt;&lt; arr[0] &lt;&lt; endl;cout &lt;&lt; &quot;指针访问第一个元素： &quot; &lt;&lt; *p &lt;&lt; endl;for (int i &#x3D; 0; i &lt; 10; i++)&#123;&#x2F;&#x2F;利用指针遍历数组cout &lt;&lt; *p &lt;&lt; endl;p++;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;值传递void swap1(int a ,int b)&#123;int temp &#x3D; a;a &#x3D; b; b &#x3D; temp;&#125;&#x2F;&#x2F;地址传递void swap2(int * p1, int *p2)&#123;int temp &#x3D; *p1;*p1 &#x3D; *p2;*p2 &#x3D; temp;&#125;int main() &#123;int a &#x3D; 10;int b &#x3D; 20;swap1(a, b); &#x2F;&#x2F; 值传递不会改变实参swap2(&amp;a, &amp;b); &#x2F;&#x2F;地址传递会改变实参cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;冒泡排序函数void bubbleSort(int * arr, int len)  &#x2F;&#x2F;int * arr 也可以写为int arr[]&#123;for (int i &#x3D; 0; i &lt; len - 1; i++)&#123;for (int j &#x3D; 0; j &lt; len - 1 - i; j++)&#123;if (arr[j] &gt; arr[j + 1])&#123;int temp &#x3D; arr[j];arr[j] &#x3D; arr[j + 1];arr[j + 1] &#x3D; temp;&#125;&#125;&#125;&#125;&#x2F;&#x2F;打印数组函数void printArray(int arr[], int len)&#123;for (int i &#x3D; 0; i &lt; len; i++)&#123;cout &lt;&lt; arr[i] &lt;&lt; endl;&#125;&#125;int main() &#123;int arr[10] &#x3D; &#123; 4,3,6,9,1,2,10,8,7,5 &#125;;int len &#x3D; sizeof(arr) &#x2F; sizeof(int);bubbleSort(arr, len);printArray(arr, len);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote><h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p><h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;stu3; &#x2F;&#x2F;结构体变量创建方式3 int main() &#123;&#x2F;&#x2F;结构体变量创建方式1struct student stu1; &#x2F;&#x2F;struct 关键字可以省略stu1.name &#x3D; &quot;张三&quot;;stu1.age &#x3D; 18;stu1.score &#x3D; 100;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu1.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu1.score &lt;&lt; endl;&#x2F;&#x2F;结构体变量创建方式2struct student stu2 &#x3D; &#123; &quot;李四&quot;,19,60 &#125;;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu2.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu2.score &lt;&lt; endl;stu3.name &#x3D; &quot;王五&quot;;stu3.age &#x3D; 18;stu3.score &#x3D; 80;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu3.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu3.score &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p></blockquote><blockquote><p>总结2：创建结构体变量时，关键字struct可以省略</p></blockquote><blockquote><p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p></blockquote><h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;int main() &#123;&#x2F;&#x2F;结构体数组struct student arr[3]&#x3D;&#123;&#123;&quot;张三&quot;,18,80 &#125;,&#123;&quot;李四&quot;,19,60 &#125;,&#123;&quot;王五&quot;,20,70 &#125;&#125;;for (int i &#x3D; 0; i &lt; 3; i++)&#123;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;;int main() &#123;struct student stu &#x3D; &#123; &quot;张三&quot;,18,100, &#125;;struct student * p &#x3D; &amp;stu;p-&gt;score &#x3D; 80; &#x2F;&#x2F;指针通过 -&gt; 操作符可以访问成员cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p></blockquote><h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;;&#x2F;&#x2F;教师结构体定义struct teacher&#123;    &#x2F;&#x2F;成员列表int id; &#x2F;&#x2F;职工编号string name;  &#x2F;&#x2F;教师姓名int age;   &#x2F;&#x2F;教师年龄struct student stu; &#x2F;&#x2F;子结构体 学生&#125;;int main() &#123;struct teacher t1;t1.id &#x3D; 10000;t1.name &#x3D; &quot;老王&quot;;t1.age &#x3D; 40;t1.stu.name &#x3D; &quot;张三&quot;;t1.stu.age &#x3D; 18;t1.stu.score &#x3D; 100;cout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl;cout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;;&#x2F;&#x2F;值传递void printStudent(student stu )&#123;stu.age &#x3D; 28;cout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;&#125;&#x2F;&#x2F;地址传递void printStudent2(student *stu)&#123;stu-&gt;age &#x3D; 28;cout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu-&gt;age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;&#125;int main() &#123;student stu &#x3D; &#123; &quot;张三&quot;,18,100&#125;;&#x2F;&#x2F;值传递printStudent(stu);cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;cout &lt;&lt; endl;&#x2F;&#x2F;地址传递printStudent2(&amp;stu);cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;;&#x2F;&#x2F;const使用场景void printStudent(const student *stu) &#x2F;&#x2F;加const防止函数体中的误操作&#123;&#x2F;&#x2F;stu-&gt;age &#x3D; 100; &#x2F;&#x2F;操作失败，因为加了const修饰cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;&#125;int main() &#123;student stu &#x3D; &#123; &quot;张三&quot;,18,100 &#125;;printStudent(&amp;stu);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Student&#123;string name;int score;&#125;;struct Teacher&#123;string name;Student sArray[5];&#125;;void allocateSpace(Teacher tArray[] , int len)&#123;string tName &#x3D; &quot;教师&quot;;string sName &#x3D; &quot;学生&quot;;string nameSeed &#x3D; &quot;ABCDE&quot;;for (int i &#x3D; 0; i &lt; len; i++)&#123;tArray[i].name &#x3D; tName + nameSeed[i];for (int j &#x3D; 0; j &lt; 5; j++)&#123;tArray[i].sArray[j].name &#x3D; sName + nameSeed[j];tArray[i].sArray[j].score &#x3D; rand() % 61 + 40;&#125;&#125;&#125;void printTeachers(Teacher tArray[], int len)&#123;for (int i &#x3D; 0; i &lt; len; i++)&#123;cout &lt;&lt; tArray[i].name &lt;&lt; endl;for (int j &#x3D; 0; j &lt; 5; j++)&#123;cout &lt;&lt; &quot;\t姓名：&quot; &lt;&lt; tArray[i].sArray[j].name &lt;&lt; &quot; 分数：&quot; &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;&#125;&#125;&#125;int main() &#123;srand((unsigned int)time(NULL)); &#x2F;&#x2F;随机数种子 头文件 #include &lt;ctime&gt;Teacher tArray[3]; &#x2F;&#x2F;老师数组int len &#x3D; sizeof(tArray) &#x2F; sizeof(Teacher);allocateSpace(tArray, len); &#x2F;&#x2F;创建数据printTeachers(tArray, len); &#x2F;&#x2F;打印数据system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;英雄结构体struct hero&#123;string name;int age;string sex;&#125;;&#x2F;&#x2F;冒泡排序void bubbleSort(hero arr[] , int len)&#123;for (int i &#x3D; 0; i &lt; len - 1; i++)&#123;for (int j &#x3D; 0; j &lt; len - 1 - i; j++)&#123;if (arr[j].age &gt; arr[j + 1].age)&#123;hero temp &#x3D; arr[j];arr[j] &#x3D; arr[j + 1];arr[j + 1] &#x3D; temp;&#125;&#125;&#125;&#125;&#x2F;&#x2F;打印数组void printHeros(hero arr[], int len)&#123;for (int i &#x3D; 0; i &lt; len; i++)&#123;cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 性别： &quot; &lt;&lt; arr[i].sex &lt;&lt; &quot; 年龄： &quot; &lt;&lt; arr[i].age &lt;&lt; endl;&#125;&#125;int main() &#123;struct hero arr[5] &#x3D;&#123;&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,&#125;;int len &#x3D; sizeof(arr) &#x2F; sizeof(hero); &#x2F;&#x2F;获取数组元素个数bubbleSort(arr, len); &#x2F;&#x2F;排序printHeros(arr, len); &#x2F;&#x2F;打印system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-基础入门&quot;&gt;&lt;a href=&quot;#C-基础入门&quot; class=&quot;headerlink&quot; title=&quot;C++基础入门&quot;&gt;&lt;/a&gt;C++基础入门&lt;/h1&gt;&lt;h2 id=&quot;1-C-初识&quot;&gt;&lt;a href=&quot;#1-C-初识&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="C++" scheme="https://oxford561.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode学习-栈和队列的互转</title>
    <link href="https://oxford561.github.io/2021/10/28/leetcode-xue-xi-zhan-he-dui-lie-de-hu-zhuan/"/>
    <id>https://oxford561.github.io/2021/10/28/leetcode-xue-xi-zhan-he-dui-lie-de-hu-zhuan/</id>
    <published>2021-10-28T12:03:06.000Z</published>
    <updated>2021-10-28T12:07:59.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="栈和队列结构"><a href="#栈和队列结构" class="headerlink" title="栈和队列结构"></a>栈和队列结构</h3><blockquote><p>队列是一种先进先出的数据结构，栈是一种先进后出的数据结构</p></blockquote><p><img src="/2021/10/28/leetcode-xue-xi-zhan-he-dui-lie-de-hu-zhuan/1.jpg" alt="image-20211028094036710"></p><h3 id="栈实现队列"><a href="#栈实现队列" class="headerlink" title="栈实现队列"></a><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">栈实现队列</a></h3><p>队列的结构是先进先出的，基于栈这种先进后出的结构是无法直接实现队列的，这里采用的是双栈的结构来实现，简单理解就是一个栈 S1 用于存放 Push 进来的元素，而 S2 则是用于取元素使用的。</p><p>但是队列取元素取的是最先进去的那个元素，所以 S2 做的工作就是将 S1 存放的元素颠倒存放进 S2，简单说就是在取元素的时候，将 S1 当中的元素全部拿出来放进 S2，这样 S2 最上面的元素就是模拟队列的队头元素了。</p><p>后面继续取模拟队列元素的时候，只需要去取 S2 中的元素，当然如果 S2 当中没有元素则需要再将 S1 中的元素放进来就可以了。这里判断模拟队列为空的时候就需要对比 S1 和 S2 两个栈的元素是否为空了。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class MyQueue &#123;    private Stack&lt;int&gt; s1, s2;    public MyQueue() &#123;        s1 &#x3D; new Stack&lt;int&gt;();        s2 &#x3D; new Stack&lt;int&gt;();    &#125;        public void Push(int x) &#123;        s1.Push(x);    &#125;        public int Pop() &#123;        &#x2F;&#x2F; 确保 S2 中有元素可取        Peek();        return s2.Pop();    &#125;        public int Peek() &#123;        &#x2F;&#x2F; 发现 S2 元素没有了        if (s2.Count &#x3D;&#x3D; 0)        &#123;            &#x2F;&#x2F; 再从 S1 中拿元素存放            while (s1.Count !&#x3D; 0)            &#123;                s2.Push(s1.Pop());            &#125;        &#125;        &#x2F;&#x2F; 这里其实还需要对 S2 栈元素个数判断，防止异常        return s2.Peek();    &#125;        public bool Empty() &#123;        return s1.Count &#x3D;&#x3D; 0 &amp;&amp; s2.Count &#x3D;&#x3D; 0;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列实现栈"><a href="#队列实现栈" class="headerlink" title="队列实现栈"></a><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">队列实现栈</a></h3><p>基于队列来实现栈的结构，没有上面那么麻烦，也不需要多个队列来做，这里只需要一个队列就可以了。</p><p>存放元素的操作依旧使用的队列入队操作，但是取元素的时候，需要考虑当前模拟栈的栈顶元素是队列的头元素也就是最小放进去的元素，直接取出元素是不符合栈的结构的，那么这个时候需要将队列的前几个元素全部出队，留下 2 个元素，然后将出队的元素添加到队尾。</p><p>之所以留下 2 个元素，是因为我们需要记录当前模拟栈顶的元素（倒数第一个是需要出队的，但是出队的同时倒数第二个就是模拟栈顶元素了）</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class MyStack &#123;    private Queue&lt;int&gt; q;    private int top &#x3D; 0;    public MyStack() &#123;        q &#x3D; new Queue&lt;int&gt;();    &#125;        public void Push(int x) &#123;        q.Enqueue(x);        top &#x3D; x;    &#125;        public int Pop() &#123;        int size &#x3D; q.Count;        &#x2F;&#x2F; 留下最后两个元素        while (size &gt; 2)        &#123;            q.Enqueue(q.Dequeue());            size--;        &#125;        top &#x3D; q.Peek();&#x2F;&#x2F; 原先倒数第二个元素就是栈顶元素了        q.Enqueue(q.Dequeue());        return q.Dequeue();&#x2F;&#x2F;原先倒数第一个元素是需要出队的    &#125;        public int Top() &#123;        return top;    &#125;        public bool Empty() &#123;        return q.Count &#x3D;&#x3D; 0;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;栈和队列结构&quot;&gt;&lt;a href=&quot;#栈和队列结构&quot; class=&quot;headerlink&quot; title=&quot;栈和队列结构&quot;&gt;&lt;/a&gt;栈和队列结构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;队列是一种先进先出的数据结构，栈是一种先进后出的数据结构&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Leetcode" scheme="https://oxford561.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode学习-滑动窗口</title>
    <link href="https://oxford561.github.io/2021/10/27/leetcode-xue-xi-hua-dong-chuang-kou/"/>
    <id>https://oxford561.github.io/2021/10/27/leetcode-xue-xi-hua-dong-chuang-kou/</id>
    <published>2021-10-27T11:51:07.000Z</published>
    <updated>2021-10-27T11:52:22.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是滑动窗口"><a href="#什么是滑动窗口" class="headerlink" title="什么是滑动窗口"></a>什么是滑动窗口</h3><p>滑动窗口也就是之前说过的双指针技巧，通过维护一个窗口，不断滑动，然后更新结果，其主要的应用场景就是在字符串的匹配上了，比如最小覆盖子串、最长无重复子串等。</p><p>滑动窗口的算法上确实维护着一个窗口，可实际理解起来还是有点麻烦，不过按照步骤划分的话也就如下的几步：</p><ul><li>首先我们依旧通过声明双指针 left = right = 0。</li><li> right ++ ，不断遍历源字符串，直到遍历过的字符串（窗口）中已经找到覆盖需要匹配的字符串要求(或者满足某种条件)</li><li>然后 left++，缩小【left,right）的窗口，直到窗口中的字符串不符合匹配的字符串要求</li><li>重复 2 和 3，直到遍历完整个字符串</li></ul><h3 id="最短覆盖子串"><a href="#最短覆盖子串" class="headerlink" title="最短覆盖子串"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/">最短覆盖子串</a></h3><blockquote><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;ADOBECODEBANC&quot;, t &#x3D; &quot;ABC&quot;输出：&quot;BANC&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; 滑动窗口（最小覆盖子串）  “AD0BEC0DEBANC”  “ABC”public static string MinWindow(string srcStr, string patter)&#123;    &#x2F;&#x2F; 存储 需要识别的子串（A:1,B:1,C:1）    Dictionary&lt;char, int&gt; need &#x3D; new Dictionary&lt;char, int&gt;();    &#x2F;&#x2F; 滑动窗口中的字符串(A:2,B:1,C:2)    Dictionary&lt;char, int&gt; window &#x3D; new Dictionary&lt;char, int&gt;();    &#x2F;&#x2F; 拿到需要识别的子串数据    foreach (char c in patter)    &#123;        if (need.ContainsKey(c))        &#123;            need[c]++;        &#125;        else        &#123;            need.Add(c, 1);        &#125;    &#125;    int left &#x3D; 0;    int right &#x3D; 0;    int valid &#x3D; 0;    int start &#x3D; 0;    int len &#x3D; int.MaxValue;    while(right &lt; srcStr.Length)    &#123;        char c &#x3D; srcStr[right];        &#x2F;&#x2F; 右移窗口        right++;        &#x2F;&#x2F; 获取窗口中的符合 识别子串的字符进行缓存        if(need.ContainsKey(c))        &#123;            if (window.ContainsKey(c))            &#123;                window[c]++;            &#125;            else            &#123;                window.Add(c, 1);            &#125;            &#x2F;&#x2F; 符合一个就计数1个            if (window[c] &#x3D;&#x3D; need[c])            &#123;                valid++;            &#125;        &#125;        &#x2F;&#x2F; 这个时候已经找到了覆盖子串的字符串窗口进行左移缩小窗口        while(valid &#x3D;&#x3D; need.Count)&#x2F;&#x2F;存在重复的可能        &#123;            if(right - left &lt; len)            &#123;                start &#x3D; left;                len &#x3D; right - left;            &#125;            char d &#x3D; srcStr[left];            left++;            if (need.ContainsKey(d))            &#123;                if (window[d] &#x3D;&#x3D; need[d])                    valid--;                window[d]--;            &#125;        &#125;    &#125;    return len &#x3D;&#x3D; int.MaxValue ? &quot;&quot; : srcStr.Substring(start,len);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串排列顺序"><a href="#字符串排列顺序" class="headerlink" title="字符串排列顺序"></a><a href="https://leetcode-cn.com/problems/permutation-in-string/">字符串排列顺序</a></h3><blockquote><pre class="line-numbers language-none"><code class="language-none">输入：s1 &#x3D; &quot;ab&quot; s2 &#x3D; &quot;eidbaooo&quot;输出：true解释：s2 包含 s1 的排列之一 (&quot;ba&quot;).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static bool checkInclusion(string t, string s)&#123;    &#x2F;&#x2F; 存储 需要识别的子串（A:1,B:1,C:1）    Dictionary&lt;char, int&gt; need &#x3D; new Dictionary&lt;char, int&gt;();    &#x2F;&#x2F; 滑动窗口中的字符串(A:2,B:1,C:2)    Dictionary&lt;char, int&gt; window &#x3D; new Dictionary&lt;char, int&gt;();    &#x2F;&#x2F; 拿到需要识别的子串数据    foreach (char c in t)    &#123;        if (need.ContainsKey(c))        &#123;            need[c]++;        &#125;        else        &#123;            need.Add(c, 1);        &#125;    &#125;    int left &#x3D; 0;    int right &#x3D; 0;    int valid &#x3D; 0;    bool isExist &#x3D; false;    while (right &lt; s.Length)    &#123;        char c &#x3D; s[right];        &#x2F;&#x2F; 右移窗口        right++;        &#x2F;&#x2F; 获取窗口中的符合 识别子串的字符进行缓存        if (need.ContainsKey(c))        &#123;            if (window.ContainsKey(c))            &#123;                window[c]++;            &#125;            else            &#123;                window.Add(c, 1);            &#125;            &#x2F;&#x2F; 符合一个就计数1个            if (window[c] &#x3D;&#x3D; need[c])            &#123;                valid++;            &#125;        &#125;        &#x2F;&#x2F; 这个时候已经找到了覆盖子串的字符串窗口进行左移缩小窗口        while ((right -left)&gt;&#x3D;t.Length)        &#123;            if (valid &#x3D;&#x3D; need.Count)            &#123;                isExist &#x3D; true;                break;            &#125;            char d &#x3D; s[left];            left++;            if (need.ContainsKey(d))            &#123;                if (window[d] &#x3D;&#x3D; need[d])                    valid--;                window[d]--;            &#125;        &#125;    &#125;    return isExist;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最长无重复子串"><a href="#最长无重复子串" class="headerlink" title="最长无重复子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">最长无重复子串</a></h3><blockquote><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">public static int LengthOfLongestSubstring(string s)&#123;    Dictionary&lt;char, int&gt; window &#x3D; new Dictionary&lt;char, int&gt;();    int left &#x3D; 0, right &#x3D; 0;    int res &#x3D; 0; &#x2F;&#x2F; 记录结果    while (right &lt; s.Length)    &#123;        char c &#x3D; s[right];        right++;        &#x2F;&#x2F; 进行窗口内数据的一系列更新        if (window.ContainsKey(c))        &#123;            window[c]++;        &#125;        else        &#123;            window.Add(c, 1);        &#125;        &#x2F;&#x2F; 判断左侧窗口是否要收缩        while (window.ContainsKey(c) &amp;&amp; window[c] &gt; 1)        &#123;            char d &#x3D; s[left];            left++;            &#x2F;&#x2F; 进行窗口内数据的一系列更新            window[d]--;        &#125;        &#x2F;&#x2F; 在这里更新答案        if ((right - left) &gt; res)        &#123;            res &#x3D; right - left;        &#125;    &#125;    return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是滑动窗口&quot;&gt;&lt;a href=&quot;#什么是滑动窗口&quot; class=&quot;headerlink&quot; title=&quot;什么是滑动窗口&quot;&gt;&lt;/a&gt;什么是滑动窗口&lt;/h3&gt;&lt;p&gt;滑动窗口也就是之前说过的双指针技巧，通过维护一个窗口，不断滑动，然后更新结果，其主要的应用场景就是在</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Leetcode" scheme="https://oxford561.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode学习-链表的环与相交</title>
    <link href="https://oxford561.github.io/2021/10/27/leetcode-xue-xi-lian-biao-de-huan-yu-xiang-jiao/"/>
    <id>https://oxford561.github.io/2021/10/27/leetcode-xue-xi-lian-biao-de-huan-yu-xiang-jiao/</id>
    <published>2021-10-27T11:48:57.000Z</published>
    <updated>2021-10-27T11:50:12.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class ListNode&#123;    public int val;    public ListNode next;    public ListNode(int val &#x3D; 0, ListNode next &#x3D; null)    &#123;        this.val &#x3D; val;        this.next &#x3D; next;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表是否包含环"><a href="#链表是否包含环" class="headerlink" title="链表是否包含环"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/">链表是否包含环</a></h3><h4 id="什么是链表的环"><a href="#什么是链表的环" class="headerlink" title="什么是链表的环"></a>什么是链表的环</h4><p>链表中环的结构字面意思就是在链表的结构中，末尾链表节点不再指向空对象，而是让末尾链表节点指向其它节点，使得整体的链表结构不再是一条顺序的线，而变成了一个环形的状态。</p><p>判断链表中是否存在环的情况，解决方案也是使用的快慢指针，依照上次说过的寻找链表中点的代码逻辑，检测链表中的是否存在环，也只不过在遍历链表的时候调整下判断条件即可，如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static bool hasCycle(ListNode head)&#123;    ListNode slow &#x3D; head;    ListNode fast &#x3D; head;    while(fast !&#x3D; null &amp;&amp; fast.next !&#x3D; null)    &#123;        slow &#x3D; slow.next;        fast &#x3D; fast.next.next;        if(fast &#x3D;&#x3D; slow)        &#123;            return true;        &#125;    &#125;    return false;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表是否相交"><a href="#链表是否相交" class="headerlink" title="链表是否相交"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">链表是否相交</a></h3><p>链表相交指的是多个链表的节点中存在汇聚的节点，使得多个链表最终汇集到一起，形象化理解就是多条小河流汇集到一条大河流的感觉。但是要解决这类相交问题，比较麻烦的一点是多个链表的长度是不一样的，无法直接通过遍历链表的方式得到相交的节点，节点之间也不一一对应。</p><p>当然处理链表中节点是否相同，其实直接用 HashSet（不重复元素集合）去收集链表节点对象，然后逐一对照就能得到答案。不过除去这种使用额外空间的方式，还有更直接的方式嘛。</p><p>确实是有的，解决问题的关键在于，通过某种方式让多个链表的节点能够在遍历的时候同时到达相交的节点。这里的解决方式就是，让这 2 个（多个）链表进行拼接，使得最后产生 2 个（多个）节点数目相同的链表，再进行逐一遍历即可。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static ListNode GetIntersectionNode(ListNode headA,ListNode headB)&#123;    &#x2F;&#x2F; p1 指向 A 链表头结点，p2 指向 B 链表头结点    ListNode p1 &#x3D; headA, p2 &#x3D; headB;    while (p1 !&#x3D; p2)    &#123;        &#x2F;&#x2F; p1 走一步，如果走到 A 链表末尾，转到 B 链表        if (p1 &#x3D;&#x3D; null) p1 &#x3D; headB;        else p1 &#x3D; p1.next;        &#x2F;&#x2F; p2 走一步，如果走到 B 链表末尾，转到 A 链表        if (p2 &#x3D;&#x3D; null) p2 &#x3D; headA;        else p2 &#x3D; p2.next;    &#125;    return p1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;链表结构&quot;&gt;&lt;a href=&quot;#链表结构&quot; class=&quot;headerlink&quot; title=&quot;链表结构&quot;&gt;&lt;/a&gt;链表结构&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-c#&quot; data-language=&quot;c#&quot;&gt;&lt;code cl</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Leetcode" scheme="https://oxford561.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode学习-查找链表元素</title>
    <link href="https://oxford561.github.io/2021/10/27/leetcode-xue-xi-cha-zhao-lian-biao-yuan-su/"/>
    <id>https://oxford561.github.io/2021/10/27/leetcode-xue-xi-cha-zhao-lian-biao-yuan-su/</id>
    <published>2021-10-27T11:46:56.000Z</published>
    <updated>2021-10-27T11:48:17.383Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h3><blockquote><p>链表是一种物理<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%8D%95%E5%85%83/8727749">存储单元</a>上非连续、非顺序的<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/350782">存储结构</a>，<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313">数据元素</a>的逻辑顺序是通过链表中的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304">指针</a>链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0">数据元素</a>的数据域，另一个是存储下一个结点地址的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304">指针</a>域。</p></blockquote><p>链表节点代码：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class ListNode&#123;    public int val;    public ListNode next;    public ListNode(int val &#x3D; 0, ListNode next &#x3D; null)    &#123;        this.val &#x3D; val;        this.next &#x3D; next;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成单链表：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">ListNode head &#x3D; new ListNode(0);ListNode one &#x3D; new ListNode(1);head.next &#x3D; one;ListNode two &#x3D; new ListNode(2);one.next &#x3D; two;ListNode three &#x3D; new ListNode(3);two.next &#x3D; three;ListNode four &#x3D; new ListNode(4);three.next &#x3D; four;&#x2F;&#x2F; head(0)-&gt;one(1)-&gt;two(2)-&gt;three(3)-&gt;four(4)-&gt;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历链表：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">ListNode temp &#x3D; head;while(temp!&#x3D;null)&#123; temp &#x3D; temp.next;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单链表的倒数第-k-个节点"><a href="#单链表的倒数第-k-个节点" class="headerlink" title="单链表的倒数第 k 个节点"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">单链表的倒数第 k 个节点</a></h3><p>链表不像数组那般可以直接通过下标进行数值的获取，访问第 k 节点，只需要从头开始遍历链表计数即可，但是对于获取链表的倒数第 k 个节点，就不是这般容易了。</p><p>一般的做法：</p><ul><li>首先遍历链表，遍历的过程中进行计数，得到链表的长度 n</li><li>那么重新遍历一次链表直到 n-k 个节点也就得到了倒数第 k 个节点了</li></ul><p>但是这种通用的做法需要遍历链表两次才能得到答案，那能不能一次遍历链表就得到结果呢？</p><p>双指针做法：</p><ul><li>声明 2 个指针 p1 和 p2</li><li>让 p1 先走 k 步</li><li>然后 p1 和 p2 一起走，等 p1 走到底了，p2 就到了倒数第 k 的位置</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static int FindLastKNode(ListNode node, int k)&#123;    ListNode p1 &#x3D; node;    ListNode p2 &#x3D; node;    for (int i &#x3D; 0; i &lt; k; i++)    &#123;        p1 &#x3D; p1.next;    &#125;    while (p1 !&#x3D; null)    &#123;        p1 &#x3D; p1.next;        p2 &#x3D; p2.next;    &#125;    return p2.val;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单链表的中点"><a href="#单链表的中点" class="headerlink" title="单链表的中点"></a><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">单链表的中点</a></h3><p>由于我们无法快速得到单链表的长度，光是遍历一次链表的话，可以采用「<b>快慢指针</b>」的方式进行求解。</p><blockquote><p><strong>每当慢指针</strong> <code>slow</code> <strong>前进一步，快指针</strong> <code>fast</code> <strong>就前进两步，这样，当</strong> <code>fast</code> <strong>走到链表末尾时，</strong><code>slow</code> <strong>就指向了链表中点</strong>。</p></blockquote><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static int FindMiddle(ListNode node)&#123;    ListNode slow &#x3D; node;    ListNode fast &#x3D; node;    while (fast !&#x3D; null &amp;&amp; fast.next !&#x3D; null)    &#123;        slow &#x3D; slow.next;        fast &#x3D; fast.next.next;    &#125;    return slow.val;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是链表&quot;&gt;&lt;a href=&quot;#什么是链表&quot; class=&quot;headerlink&quot; title=&quot;什么是链表&quot;&gt;&lt;/a&gt;什么是链表&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;链表是一种物理&lt;a href=&quot;https://baike.baidu.com/item/</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Leetcode" scheme="https://oxford561.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>二分搜索算法</title>
    <link href="https://oxford561.github.io/2021/10/23/leetcode-xue-xi-er-fen-sou-suo-suan-fa/"/>
    <id>https://oxford561.github.io/2021/10/23/leetcode-xue-xi-er-fen-sou-suo-suan-fa/</id>
    <published>2021-10-23T02:43:59.000Z</published>
    <updated>2021-10-23T02:52:04.268Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是二分搜索"><a href="#什么是二分搜索" class="headerlink" title="什么是二分搜索"></a>什么是二分搜索</h3><p>二分搜索也称折半查找，是一种基于有序数组的查找特定元素的搜索算法。</p><p>搜索的过程是在有序数组的中间开始的，如果中间的元素刚好是我们希望查找到的元素，则提前搜索结束，返回元素的位置下标即可；如果我们查找的元素大于中间元素，则在数组大于中间元素的一半继续查找，同样的要是我们查找的元素小于中间元素，则在数组小于中间元素的一半继续查找。最后查找完数组的所有空间还没有返回特定元素的下标则代表没有查找到。</p><p>二分搜索算法每一次的查找都会缩小搜索范围的一半，以更快的速度进行查找。</p><h3 id="基础的二分搜索"><a href="#基础的二分搜索" class="headerlink" title="基础的二分搜索"></a>基础的二分搜索</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static int BinarySearch(int[] nums, int target)&#123;    int left &#x3D; 0;    int right &#x3D; nums.Length - 1;    int mid &#x3D; 0;    while (left &lt;&#x3D; right)    &#123;        mid &#x3D; left + (right - left) &#x2F; 2;&#x2F;&#x2F; 防止溢出        if (nums[mid] &#x3D;&#x3D; target)        &#123;            return mid;        &#125;        else if (nums[mid] &gt; target)        &#123;            right &#x3D; mid - 1;        &#125;        else if (nums[mid] &lt; target)        &#123;            left &#x3D; mid + 1;        &#125;    &#125;    return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的二分搜索代码中，需要注意的有以下几点：</p><ul><li>right 的赋值是 nums.Length - 1,而不是 数组的长度    </li><li>while 循环中的条件是 &lt;=  而不是 &lt;（前者查遍所有元素，后者会遗漏元素）</li><li>mid的赋值是这样的，mid = left + (right - left) / 2，为的就是防止（left+right）数值溢出</li><li>left 和 right 的赋值是 mid + 1 以及 mid - 1（因为 mid 已经搜索过了）</li></ul><h3 id="寻找左边界的二分搜索"><a href="#寻找左边界的二分搜索" class="headerlink" title="寻找左边界的二分搜索"></a>寻找左边界的二分搜索</h3><p>有序数组中的元素并不是没有重复元素，如果在使用二分搜索的时候遇到重复元素，如何定位具体要求下的位置，这对于基础的二分搜索就有更高要求了。</p><p>寻找左边界的二分搜索，就是能够查找到重复元素最左边的位置。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static int BinarySearchLeft(int[] nums,int target)&#123;    int left &#x3D; 0;    int right &#x3D; nums.Length - 1;    int mid &#x3D; 0;    while (left &lt;&#x3D; right)    &#123;        mid &#x3D; left + (right - left) &#x2F; 2;&#x2F;&#x2F; 防止溢出        if (nums[mid] &#x3D;&#x3D; target)        &#123;            right &#x3D; mid - 1;        &#125;        else if (nums[mid] &gt; target)        &#123;            right &#x3D; mid - 1;        &#125;        else if (nums[mid] &lt; target)        &#123;            left &#x3D; mid + 1;        &#125;    &#125;    &#x2F;&#x2F; 最后要检查 left 越界的情况    if (left &gt;&#x3D; nums.Length || nums[left] !&#x3D; target)        return -1;    return left;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码大体和基础的二分搜索代码差不多，只不过在查找到特定元素后，不是直接返回特定元素的位置，而是将搜索范围进一步缩小开始继续搜索，直至找到最左边的元素位置。（注意 left 的越界情况）</p><h3 id="寻找右边界的二分搜索"><a href="#寻找右边界的二分搜索" class="headerlink" title="寻找右边界的二分搜索"></a>寻找右边界的二分搜索</h3><p>有边界搜索问题和左边界搜索是差不多的，就不赘述了。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static int BinarySearchRight(int[] nums, int target)&#123;    int left &#x3D; 0;    int right &#x3D; nums.Length - 1;    int mid &#x3D; 0;    while (left &lt;&#x3D; right)    &#123;        mid &#x3D; left + (right - left) &#x2F; 2;&#x2F;&#x2F; 防止溢出        if (nums[mid] &#x3D;&#x3D; target)        &#123;            left &#x3D; mid + 1;        &#125;        else if (nums[mid] &gt; target)        &#123;            right &#x3D; mid - 1;        &#125;        else if (nums[mid] &lt; target)        &#123;            left &#x3D; mid + 1;        &#125;    &#125;    &#x2F;&#x2F; 最后要检查 right 越界的情况    if (right &lt; 0 || nums[right] !&#x3D; target)        return -1;    return right;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是二分搜索&quot;&gt;&lt;a href=&quot;#什么是二分搜索&quot; class=&quot;headerlink&quot; title=&quot;什么是二分搜索&quot;&gt;&lt;/a&gt;什么是二分搜索&lt;/h3&gt;&lt;p&gt;二分搜索也称折半查找，是一种基于有序数组的查找特定元素的搜索算法。&lt;/p&gt;
&lt;p&gt;搜索的过程是在有序</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Leetcode" scheme="https://oxford561.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode学习-回文串的判断</title>
    <link href="https://oxford561.github.io/2021/10/23/leetcode-xue-xi-hui-wen-chuan-de-pan-duan/"/>
    <id>https://oxford561.github.io/2021/10/23/leetcode-xue-xi-hui-wen-chuan-de-pan-duan/</id>
    <published>2021-10-23T02:42:43.000Z</published>
    <updated>2021-10-23T02:44:26.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是回文串"><a href="#什么是回文串" class="headerlink" title="什么是回文串"></a>什么是回文串</h2><p>回文串就是正着读和反着读都一样的字符串，比如 aba 和 abba 都是回文串，字符串存在对称性就是了。</p><h2 id="最长回文串"><a href="#最长回文串" class="headerlink" title="最长回文串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">最长回文串</a></h2><p>要寻找一段字符串中的回文串，核心就是使用<b>双指针</b>,也就是聚焦字符串的中间开始向两边扩撒来判断回文串，但凡符合要求的就是回文串。</p><p>当然如果需要找寻最长的回文串，无非遍历整个字符串的所有节点一次进行回文串的判断，得到最长回文串罢了。</p><p>双指针解法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 寻找固定位置两边的回文串&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;s&quot;&gt;字符串&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;l&quot;&gt;左指针下标&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;r&quot;&gt;右指针下标&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;public static string Palindrome(string s,int l,int r)&#123;    char[] arr &#x3D; s.ToCharArray();    while (l &gt;&#x3D; 0 &amp;&amp; r&lt;s.Length&amp;&amp; arr[l] &#x3D;&#x3D; arr[r])    &#123;        l--;        r++;    &#125;    return s.Substring(l+1,r-l-1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寻找最长回文串：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 寻找最长回文串  (aba,abba)&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;s&quot;&gt;&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;public static string LongestPalindrome(string s)&#123;    string res &#x3D; &quot;&quot;;    for (int i &#x3D; 0; i &lt; s.Length; i++)    &#123;        &#x2F;&#x2F; 以 s[i] 为中心的最长回文子串        string s1 &#x3D; Palindrome(s, i, i);        &#x2F;&#x2F; 以 s[i] 和 s[i+1] 为中心的最长回文子串        string s2 &#x3D; Palindrome(s, i, i + 1);        &#x2F;&#x2F; res &#x3D; longest(res, s1, s2)        res &#x3D; res.Length &gt; s1.Length ? res : s1;        res &#x3D; res.Length &gt; s2.Length ? res : s2;    &#125;    return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里寻找最长回文串的代码中，声明了两种找寻方式，这也是针对不同回文串（奇数和偶数）的解决方法，这才有的双指针输入参数的意义，最后比较最长的那个字符串即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是回文串&quot;&gt;&lt;a href=&quot;#什么是回文串&quot; class=&quot;headerlink&quot; title=&quot;什么是回文串&quot;&gt;&lt;/a&gt;什么是回文串&lt;/h2&gt;&lt;p&gt;回文串就是正着读和反着读都一样的字符串，比如 aba 和 abba 都是回文串，字符串存在对称性就是了。&lt;/</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Leetcode" scheme="https://oxford561.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode学习-前缀和</title>
    <link href="https://oxford561.github.io/2021/10/23/leetcode-xue-xi-qian-zhui-he/"/>
    <id>https://oxford561.github.io/2021/10/23/leetcode-xue-xi-qian-zhui-he/</id>
    <published>2021-10-23T02:41:44.000Z</published>
    <updated>2021-10-23T02:42:15.018Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>快速索引一个区间内的元素之和</p></blockquote><h2 id="1、区间和检索"><a href="#1、区间和检索" class="headerlink" title="1、区间和检索"></a>1、<a href="https://leetcode-cn.com/problems/range-sum-query-immutable/submissions/">区间和检索</a></h2><p>测试用例</p><blockquote><p>输入：<br>[“NumArray”, “sumRange”, “sumRange”, “sumRange”]<br>[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]</p><p>输出：<br>[null, 1, -1, -3]</p><p>解释：<br>NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);<br>numArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)<br>numArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1))<br>numArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))</p></blockquote><p>普通解法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class NumArray &#123;    private int[] arr &#x3D; null;    public NumArray(int[] nums)    &#123;        arr &#x3D; nums;    &#125;    public int SumRange(int left, int right)    &#123;        int res &#x3D; 0;        for (int i &#x3D; left; i &lt;&#x3D; right; i++)        &#123;            res +&#x3D; arr[i];        &#125;        return res;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前缀和解法：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class NumArray &#123;    private int[] preSum &#x3D; null;    public NumArray(int[] nums)    &#123;        preSum &#x3D; new int[nums.Length+1];        for(int i &#x3D; 1;i&lt; preSum.Length;i++)&#123;            preSum[i] &#x3D; preSum[i-1]+nums[i-1];        &#125;    &#125;    public int SumRange(int left, int right)    &#123;        return preSum[right+1]- preSum[left];    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;快速索引一个区间内的元素之和&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、区间和检索&quot;&gt;&lt;a href=&quot;#1、区间和检索&quot; class=&quot;headerlink&quot; title=&quot;1、区间和检索&quot;&gt;&lt;/a&gt;1、&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Leetcode" scheme="https://oxford561.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode学习-原地修改数组</title>
    <link href="https://oxford561.github.io/2021/10/23/leetcode-xue-xi-yuan-di-xiu-gai-shu-zu/"/>
    <id>https://oxford561.github.io/2021/10/23/leetcode-xue-xi-yuan-di-xiu-gai-shu-zu/</id>
    <published>2021-10-23T02:40:03.000Z</published>
    <updated>2021-10-23T02:41:54.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原地修改数组，避免数据的搬移</p></blockquote><h2 id="1、有序链表去重"><a href="#1、有序链表去重" class="headerlink" title="1、有序链表去重"></a>1、<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">有序链表去重</a></h2><h3 id="1-1-声明链表结构"><a href="#1-1-声明链表结构" class="headerlink" title="1.1 声明链表结构"></a>1.1 声明链表结构</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class ListNode&#123;      public int val;      public ListNode next;      public ListNode(int val&#x3D;0, ListNode next&#x3D;null)       &#123;          this.val &#x3D; val;          this.next &#x3D; next;      &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-去重函数"><a href="#1-2-去重函数" class="headerlink" title="1.2 去重函数"></a>1.2 去重函数</h3><p>原地修改的话，也就不能再产生新的容器进行数据的存储，只能在原先的数据结构中进行数据的修改，这里采用快慢指针的方式进行链表元素的遍历.</p><p>fast 指针快速遍历整个链表，遇到不重复的元素就通知 slow 指针前进，最后 fast 指针遍历完成则去重任务也就完成了。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public ListNode DeleteDuplicates(ListNode head) &#123;    if (head &#x3D;&#x3D; null) return null;    ListNode slow, fast;    slow &#x3D; head;    fast &#x3D; head;    while(fast !&#x3D; null)    &#123;           if(fast.val !&#x3D; slow.val)        &#123;            slow.next &#x3D; fast;            slow &#x3D; slow.next;        &#125;        fast &#x3D; fast.next;    &#125;    slow.next &#x3D; null;    return head;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、移除元素"><a href="#2、移除元素" class="headerlink" title="2、移除元素"></a>2、<a href="https://leetcode-cn.com/problems/remove-element/">移除元素</a></h2><p>输入：nums = [3,2,2,3], val = 3 输出：2, nums = [2,2]</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public int RemoveElement(int[] nums, int val) &#123;    int fast &#x3D; 0, slow &#x3D; 0;    while (fast &lt; nums.Length) &#123;        if (nums[fast] !&#x3D; val) &#123;            nums[slow] &#x3D; nums[fast];            slow++;        &#125;        fast++;    &#125;    return slow;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原地修改数组，避免数据的搬移&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、有序链表去重&quot;&gt;&lt;a href=&quot;#1、有序链表去重&quot; class=&quot;headerlink&quot; title=&quot;1、有序链表去重&quot;&gt;&lt;/a&gt;1、&lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Leetcode" scheme="https://oxford561.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf 自动化</title>
    <link href="https://oxford561.github.io/2021/10/23/protobuf-zi-dong-hua/"/>
    <id>https://oxford561.github.io/2021/10/23/protobuf-zi-dong-hua/</id>
    <published>2021-10-23T02:36:10.000Z</published>
    <updated>2021-10-23T02:37:05.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Protobuf-标签问题"><a href="#Protobuf-标签问题" class="headerlink" title="Protobuf 标签问题"></a>Protobuf 标签问题</h2><p>之前有提到说，但凡序列化的对象都需要打上标签，像下面这种的。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[ProtoContract][Serializable]class Student&#123;    [ProtoMember(1)]    public string name;    [ProtoMember(2)]    public int age;    [ProtoMember(3)]    public Address address;&#125;[ProtoContract][Serializable]class Address&#123;    [ProtoMember(1)]    public string province;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过对于这种手动打标签的方式，每次新增对象都去一个个添加标签是很繁琐的，而且也容易出现纰漏，那么有没有什么比较便捷的方式解决这样的情况呢？</p><p>答案是有的，protobuf 提供了批处理序列化对象的方式。</p><h2 id="Protobuf-自动化"><a href="#Protobuf-自动化" class="headerlink" title="Protobuf 自动化"></a>Protobuf 自动化</h2><h4 id="声明-proto-文件（定义协议格式）"><a href="#声明-proto-文件（定义协议格式）" class="headerlink" title="声明 proto 文件（定义协议格式）"></a>声明 proto 文件（定义协议格式）</h4><p>通过构建一个后缀为 .proto 的文件，里面填充关于所需要序列化对象的结构，比如 ProtoList.proto。</p><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf">syntax&#x3D;&quot;proto2&quot;;package Protocol;message Address&#123;required string province &#x3D; 1;repeated string testLst &#x3D; 2;optional string other &#x3D; 3;&#125;message Student&#123;required string name &#x3D; 1;required int32 age &#x3D; 2;required Address address &#x3D; 3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>syntax 代表着使用的是 proto2 的语法，目前 protobuf 已经有了 proto3 的语法，但是 proto2 的语法范围更广一点。</p><p>package 对于C#来说，这个协议封装在 Protocol 命名空间中，后续使用这里面的对象时需要先引入这个命名空间。</p><p>message 是包含一系列类型字段的集合，protobuf 提供了一些简单的数据类型，包括：</p><ul><li>bool</li><li>int32</li><li>float</li><li>double</li><li>string</li></ul><p>当然也存在其它类型，比如代码中 Address 也可以作为 Student 的数据类型，在数据类型后面的 =1、=2 表示的当前 message 的顺位。</p><p>对于数据类型前面的修饰符，protobuf 大体提供下面几种：</p><ul><li>required：这是是必须提供的，声明了就必须有的字段</li><li>optional：表示可选的字段，也就是可以没有数据</li><li>repeated：这个字段表示可以重复任意次数，可作为 List 使用</li></ul><h4 id="编译-proto-文件"><a href="#编译-proto-文件" class="headerlink" title="编译 .proto 文件"></a>编译 .proto 文件</h4><p>咱们已经创建了一个 .proto 文件，    下面就需要调用 protobuf 提供的编译工具对这个文件进行处理，得到我们需要的 C# 序列化对象脚本。</p><p>关于获取 protobuf 提供的编译工具，可以到 <a href="https://github.com/protobuf-net/protobuf-net">protobuf-net</a> github 地址获取源码，从里面获取 protoc.exe 以及 protogen.zip（针对windows平台）里面的东西。</p><p>获取到 protobuf 的编译工具 protoc 以及 protogen ，然后就是使用命令行针对 .proto 文件进行处理。</p><p>调用工具命令生成，进入到能够访问工具的地址，执行下面命令（protoc 命令也是可以的）：</p><blockquote><p>protogen.exe –csharp_out=outPath ProtoList.proto</p></blockquote><blockquote><p>protogen.exe “生成C#语言协议”=“生成的路径” 需要的协议模板</p></blockquote><p>执行完命令后会生成一个 C# 脚本文件，里面展示着之前声明的协议结构（不需要人工修改，有更改再直接生成）</p><pre class="line-numbers language-proto" data-language="proto"><code class="language-proto">&#x2F;&#x2F; This file was generated by a tool; you should avoid making direct changes.&#x2F;&#x2F; Consider using &#39;partial classes&#39; to extend these types&#x2F;&#x2F; Input: ProtoList.proto#pragma warning disable CS1591, CS0612, CS3021, IDE1006namespace Protocol&#123;    [global::ProtoBuf.ProtoContract()]    public partial class Address : global::ProtoBuf.IExtensible    &#123;        private global::ProtoBuf.IExtension __pbn__extensionData;        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)            &#x3D;&gt; global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);        [global::ProtoBuf.ProtoMember(1, Name &#x3D; @&quot;province&quot;, IsRequired &#x3D; true)]        public string Province &#123; get; set; &#125;        [global::ProtoBuf.ProtoMember(2, Name &#x3D; @&quot;testLst&quot;)]        public global::System.Collections.Generic.List&lt;string&gt; testLsts &#123; get; &#125; &#x3D; new global::System.Collections.Generic.List&lt;string&gt;();        [global::ProtoBuf.ProtoMember(3, Name &#x3D; @&quot;other&quot;)]        [global::System.ComponentModel.DefaultValue(&quot;&quot;)]        public string Other        &#123;            get &#123; return __pbn__Other ?? &quot;&quot;; &#125;            set &#123; __pbn__Other &#x3D; value; &#125;        &#125;        public bool ShouldSerializeOther() &#x3D;&gt; __pbn__Other !&#x3D; null;        public void ResetOther() &#x3D;&gt; __pbn__Other &#x3D; null;        private string __pbn__Other;    &#125;    [global::ProtoBuf.ProtoContract()]    public partial class Student : global::ProtoBuf.IExtensible    &#123;        private global::ProtoBuf.IExtension __pbn__extensionData;        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)            &#x3D;&gt; global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);        [global::ProtoBuf.ProtoMember(1, Name &#x3D; @&quot;name&quot;, IsRequired &#x3D; true)]        public string Name &#123; get; set; &#125;        [global::ProtoBuf.ProtoMember(2, Name &#x3D; @&quot;age&quot;, IsRequired &#x3D; true)]        public int Age &#123; get; set; &#125;        [global::ProtoBuf.ProtoMember(3, Name &#x3D; @&quot;address&quot;, IsRequired &#x3D; true)]        public Address Address &#123; get; set; &#125;    &#125;&#125;#pragma warning restore CS1591, CS0612, CS3021, IDE1006<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成协议的过程中，命令提示框会显示相关信息，如果 .proto 文件编写有错误也会在生成的时候显示出来，解决书写错误才能最终生成协议文件。</p><p>上述的生成C#协议文件，如果觉得命令敲得不方便，可以采用批处理的方式，将命令写进批处理程序中。</p><p><i>生成后的协议对象属性基本都是大写开头…</i></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Protobuf-标签问题&quot;&gt;&lt;a href=&quot;#Protobuf-标签问题&quot; class=&quot;headerlink&quot; title=&quot;Protobuf 标签问题&quot;&gt;&lt;/a&gt;Protobuf 标签问题&lt;/h2&gt;&lt;p&gt;之前有提到说，但凡序列化的对象都需要打上标签，像下面</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="C#" scheme="https://oxford561.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf 的基本使用</title>
    <link href="https://oxford561.github.io/2021/10/18/protobuf-de-ji-ben-shi-yong/"/>
    <id>https://oxford561.github.io/2021/10/18/protobuf-de-ji-ben-shi-yong/</id>
    <published>2021-10-18T12:23:55.000Z</published>
    <updated>2021-10-18T12:24:52.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Protobuf？"><a href="#什么是-Protobuf？" class="headerlink" title="什么是 Protobuf？"></a>什么是 Protobuf？</h2><blockquote><p><em>Protocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据序列化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</em></p></blockquote><h2 id="Protobuf-的优势"><a href="#Protobuf-的优势" class="headerlink" title="Protobuf 的优势"></a>Protobuf 的优势</h2><ul><li>序列化和反序列化速度很快</li><li>与语言平台无关，可以实现跨语言平台的数据转换</li><li>数据能实现高强度的压缩，占用空间会很小</li><li>扩展性和兼容性好，更新数据结构后也能兼容旧版本</li></ul><h2 id="Protobuf-的基本使用（protobuf-net版本）"><a href="#Protobuf-的基本使用（protobuf-net版本）" class="headerlink" title="Protobuf 的基本使用（protobuf-net版本）"></a>Protobuf 的基本使用（protobuf-net版本）</h2><p>Protobuf 有很多个语言版本，对于 C# 而言，没有采用 Google 的版本，使用的是 <a href="https://github.com/protobuf-net/protobuf-net">protobuf-net</a> 。</p><p>protobuf-net 是一个基于合约的 .NET 代码序列化器，它恰好以谷歌设计的“协议缓冲区”序列化格式写入数据。但是，该 API 与 Google 的非常不同，并且遵循典型的 .NET 模式（它在使用上具有广泛的可比性<code>XmlSerializer</code>，例如<code>DataContractSerializer</code>、 等）。它应该适用于大多数编写标准类型并可以使用属性的 .NET 语言。</p><h2 id="Protobuf-对象"><a href="#Protobuf-对象" class="headerlink" title="Protobuf 对象"></a>Protobuf 对象</h2><p>相对于常规版序列化对象而言，Protobuf 针对对象添加了 「 ProtoContract」 标签，对于每个对象下的成员使用 「 ProtoMember」 标签，序号代表其所处的位置。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[ProtoContract][Serializable]class Student&#123;    [ProtoMember(1)]    public string name;    [ProtoMember(2)]    public int age;    [ProtoMember(3)]    public Address address;&#125;[ProtoContract][Serializable]class Address&#123;    [ProtoMember(1)]    public string province;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Protobuf-序列化"><a href="#Protobuf-序列化" class="headerlink" title="Protobuf 序列化"></a>Protobuf 序列化</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">public static byte[] Serialize(Student stu)&#123;    byte[] bytes &#x3D; null;    using (MemoryStream ms &#x3D; new MemoryStream())    &#123;        Serializer.Serialize(ms, stu);        bytes &#x3D; new byte[ms.Length];        Buffer.BlockCopy(ms.GetBuffer(), 0, bytes, 0, (int)ms.Length);    &#125;    return bytes;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Protobuf-反序列化"><a href="#Protobuf-反序列化" class="headerlink" title="Protobuf 反序列化"></a>Protobuf 反序列化</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static Student DeSerialize(byte[] bytes)&#123;    Student stu &#x3D; null;    using (MemoryStream ms &#x3D; new MemoryStream(bytes))    &#123;        stu &#x3D; Serializer.Deserialize&lt;Student&gt;(ms);    &#125;    return stu;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Protobuf-读写文件"><a href="#Protobuf-读写文件" class="headerlink" title="Protobuf 读写文件"></a>Protobuf 读写文件</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">&#x2F;&#x2F; 写入文件using(FileStream file &#x3D; File.Create(&quot;student.bytes&quot;))&#123;    Serializer.Serialize(file, student);&#125;&#x2F;&#x2F; 读取文件using(FileStream file &#x3D; File.OpenRead(&quot;student.bytes&quot;))&#123;    Student newStu &#x3D; Serializer.Deserialize&lt;Student&gt;(file);    Console.WriteLine(newStu.address.province);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-Protobuf？&quot;&gt;&lt;a href=&quot;#什么是-Protobuf？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Protobuf？&quot;&gt;&lt;/a&gt;什么是 Protobuf？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Protocol </summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="C#" scheme="https://oxford561.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 常规序列化方式</title>
    <link href="https://oxford561.github.io/2021/10/18/csharp-chang-gui-xu-lie-hua-fang-shi/"/>
    <id>https://oxford561.github.io/2021/10/18/csharp-chang-gui-xu-lie-hua-fang-shi/</id>
    <published>2021-10-18T12:19:57.000Z</published>
    <updated>2021-10-18T12:24:20.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化是什么？"><a href="#序列化是什么？" class="headerlink" title="序列化是什么？"></a>序列化是什么？</h2><p><b>序列化</b>就是将对象的状态信息转换为可以存储或传输形式的过程。 其实就是将对象持久化，比如说把对象保存为二进制或者是XML的方式。 可以将对象序列到流、磁盘、内存和网络等等。 相反，反序列化则是将存储或传输形式转换为对象的过程。</p><h2 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h2><p>序列化的对象需要在 class 上面添加 「 Serializable 」 标签，嵌套对象也是需要的。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[Serializable]class Student&#123;    public string name;    public int age;    public Address address;&#125;[Serializable]class Address&#123;    public string province;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="序列化代码"><a href="#序列化代码" class="headerlink" title="序列化代码"></a>序列化代码</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static byte[] Serialize(Student stu)&#123;    byte[] data &#x3D; null;    MemoryStream ms &#x3D; new MemoryStream();    BinaryFormatter bf &#x3D; new BinaryFormatter();    try    &#123;        bf.Serialize(ms, stu);        ms.Seek(0, SeekOrigin.Begin);        data &#x3D; ms.ToArray();    &#125;    catch (SerializationException e)    &#123;        Console.WriteLine(e.ToString());    &#125;    finally    &#123;        ms.Close();    &#125;    return data;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反序列化代码"><a href="#反序列化代码" class="headerlink" title="反序列化代码"></a>反序列化代码</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static Student DeSerialize(byte[] bytes)&#123;    Student newStu &#x3D; null;    MemoryStream ms &#x3D; new MemoryStream(bytes);    BinaryFormatter bf &#x3D; new BinaryFormatter();    try    &#123;        newStu &#x3D; (Student)bf.Deserialize(ms);    &#125;    catch (SerializationException e)    &#123;        Console.WriteLine(e.ToString());    &#125;    finally    &#123;        ms.Close();    &#125;    return newStu;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序列化是什么？&quot;&gt;&lt;a href=&quot;#序列化是什么？&quot; class=&quot;headerlink&quot; title=&quot;序列化是什么？&quot;&gt;&lt;/a&gt;序列化是什么？&lt;/h2&gt;&lt;p&gt;&lt;b&gt;序列化&lt;/b&gt;就是将对象的状态信息转换为可以存储或传输形式的过程。 其实就是将对象持久化，比如</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="C#" scheme="https://oxford561.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>第一个CPP程序</title>
    <link href="https://oxford561.github.io/2021/06/22/di-yi-ge-cpp-cheng-xu/"/>
    <id>https://oxford561.github.io/2021/06/22/di-yi-ge-cpp-cheng-xu/</id>
    <published>2021-06-22T14:29:57.000Z</published>
    <updated>2021-06-22T14:39:55.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>既然是学习C++，必然少不了我们的宇宙最好的IDE—VS，使用VS创建一个支持C++的空项目。<br><img src="/2021/06/22/di-yi-ge-cpp-cheng-xu/C++01.png"><br><img src="/2021/06/22/di-yi-ge-cpp-cheng-xu/C++02.png"></p><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>然后在创建好的工程里，源文件右击添加新建项，选择cpp文件进行代码文件的创建。<br><img src="/2021/06/22/di-yi-ge-cpp-cheng-xu/C++03.png"></p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>在 CPP 文件中编写如下的代码，便能够得到 Hello World的结果了，具体代码的作用暂且不管~</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int main() &#123;cout &lt;&lt; &quot;Hello World&quot; &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><p>写完代码在VS上点击运行按钮即可看到运行结果。</p><p><img src="/2021/06/22/di-yi-ge-cpp-cheng-xu/C++04.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;p&gt;既然是学习C++，必然少不了我们的宇宙最好的IDE—VS，使用VS创建一个支持C++的空项目。&lt;br&gt;&lt;img src=&quot;/</summary>
      
    
    
    
    <category term="技术" scheme="https://oxford561.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="C++" scheme="https://oxford561.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>游泳初尝试</title>
    <link href="https://oxford561.github.io/2021/06/21/you-yong-chu-chang-shi/"/>
    <id>https://oxford561.github.io/2021/06/21/you-yong-chu-chang-shi/</id>
    <published>2021-06-21T13:59:33.000Z</published>
    <updated>2021-06-20T02:13:03.205Z</updated>
    
    <content type="html"><![CDATA[<p>今天下午终于迈出了第一步，跟着老婆下到小区的游泳池，前段时间办理的游泳卡用到了～</p><p>泳池里来的人不多，主要是我们下午3点半开始做饭，四点半就吃完晚饭了，五点半来到这边，基本还有好多人还在家吃饭吧。</p><p>在岸边戴好帽子和眼镜，而且也带来了游泳圈，本来不太想带游泳圈的，毕竟我们这么大的人，不过我们都不会游泳，所以为了安全带了。</p><p>事实证明游泳圈确实是带对了，有了游泳圈，套在自己的身上是完全不怕沉下去的，我试过无论怎么翻身都稳稳漂在水上。</p><p>下水之后，主要还是看老婆表演，毕竟她比我有基础，我除了几年前在泰国下过水，基本都没有下水了，我老婆小时候就经常游，不过长大了也不是很会。</p><p>我们俩折腾了两个小时，我发现泳帽下拉可以盖住耳朵防止进水，泳镜也不会进水，然后我尝试憋气沉下去，发现问题不大，然后逐渐胆子变大，尝试憋气模仿其他人游泳的姿势，在水里折腾了几下，发现可以在水下前行，我老婆都惊呆了，我竟然可以憋气下潜游泳，憋气多久就能游多远，不过就是没气的话就慌了，时常呛水～</p><p>然后又过了差不多一个小时，我基本掌握了憋气下潜游泳，不得不说我在游泳这方面是有天赋的！</p><p>差不多就回来了，实在是很不错的经历，以后可以常来游泳池游泳！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天下午终于迈出了第一步，跟着老婆下到小区的游泳池，前段时间办理的游泳卡用到了～&lt;/p&gt;
&lt;p&gt;泳池里来的人不多，主要是我们下午3点半开始做饭，四点半就吃完晚饭了，五点半来到这边，基本还有好多人还在家吃饭吧。&lt;/p&gt;
&lt;p&gt;在岸边戴好帽子和眼镜，而且也带来了游泳圈，本来不太</summary>
      
    
    
    
    <category term="生活" scheme="https://oxford561.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="日记随笔" scheme="https://oxford561.github.io/tags/%E6%97%A5%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://oxford561.github.io/2021/06/16/hello-world/"/>
    <id>https://oxford561.github.io/2021/06/16/hello-world/</id>
    <published>2021-06-16T13:35:58.823Z</published>
    <updated>2021-06-16T13:35:58.831Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>扑克牌—梅花5</title>
    <link href="https://oxford561.github.io/2021/05/30/bu-ke-pai-mei-hua-5/"/>
    <id>https://oxford561.github.io/2021/05/30/bu-ke-pai-mei-hua-5/</id>
    <published>2021-05-30T06:35:39.000Z</published>
    <updated>2021-05-30T06:37:41.006Z</updated>
    
    <content type="html"><![CDATA[<p>多用谷歌引擎多去搜一搜普通人可能遇到的问题，并且思考有哪些办法能帮助他们解决问题。这样操作的次数多了以后，你会发现自己寻找需求的敏锐度有极大的提升。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;多用谷歌引擎多去搜一搜普通人可能遇到的问题，并且思考有哪些办法能帮助他们解决问题。这样操作的次数多了以后，你会发现自己寻找需求的敏锐度有极大的提升。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="扑克牌封面" scheme="https://oxford561.github.io/tags/%E6%89%91%E5%85%8B%E7%89%8C%E5%B0%81%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>扑克牌—梅花4</title>
    <link href="https://oxford561.github.io/2021/05/30/bu-ke-pai-mei-hua-4/"/>
    <id>https://oxford561.github.io/2021/05/30/bu-ke-pai-mei-hua-4/</id>
    <published>2021-05-30T06:34:02.000Z</published>
    <updated>2021-05-30T06:35:36.261Z</updated>
    
    <content type="html"><![CDATA[<p>不要心存侥幸，你觉得可能出bug的地方，很大几率就会有bug。</p><p>互联网是世界上最全，最大的“书”，在问别人之前，要先学会问搜索引擎。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不要心存侥幸，你觉得可能出bug的地方，很大几率就会有bug。&lt;/p&gt;
&lt;p&gt;互联网是世界上最全，最大的“书”，在问别人之前，要先学会问搜索引擎。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="扑克牌封面" scheme="https://oxford561.github.io/tags/%E6%89%91%E5%85%8B%E7%89%8C%E5%B0%81%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>扑克牌—梅花3</title>
    <link href="https://oxford561.github.io/2021/05/30/bu-ke-pai-mei-hua-3/"/>
    <id>https://oxford561.github.io/2021/05/30/bu-ke-pai-mei-hua-3/</id>
    <published>2021-05-30T06:30:28.000Z</published>
    <updated>2021-05-30T06:34:00.125Z</updated>
    
    <content type="html"><![CDATA[<p>多去了解各种现成的接口、插件、库。可能有些工程师经常调侃自己为接口的调试员，其实无伤大雅，我们看中的是你独立解决问题的能力。这是一场开卷考试，如何更快地帮助公司解决问题，是最重要的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;多去了解各种现成的接口、插件、库。可能有些工程师经常调侃自己为接口的调试员，其实无伤大雅，我们看中的是你独立解决问题的能力。这是一场开卷考试，如何更快地帮助公司解决问题，是最重要的。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="扑克牌封面" scheme="https://oxford561.github.io/tags/%E6%89%91%E5%85%8B%E7%89%8C%E5%B0%81%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>扑克牌—梅花2</title>
    <link href="https://oxford561.github.io/2021/05/30/bu-ke-pai-mei-hua-2/"/>
    <id>https://oxford561.github.io/2021/05/30/bu-ke-pai-mei-hua-2/</id>
    <published>2021-05-30T06:28:44.000Z</published>
    <updated>2021-05-30T06:30:25.249Z</updated>
    
    <content type="html"><![CDATA[<p>不要重复造轮子，虽然技术上的成就感很有价值，但是从长远回报来看，更多地去从商业角度考虑问题，可能会价值更大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不要重复造轮子，虽然技术上的成就感很有价值，但是从长远回报来看，更多地去从商业角度考虑问题，可能会价值更大。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="扑克牌封面" scheme="https://oxford561.github.io/tags/%E6%89%91%E5%85%8B%E7%89%8C%E5%B0%81%E9%9D%A2/"/>
    
  </entry>
  
</feed>
